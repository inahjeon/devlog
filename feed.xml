<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://inahjeon.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://inahjeon.github.io/" rel="alternate" type="text/html" /><updated>2020-03-29T07:09:05-05:00</updated><id>https://inahjeon.github.io/feed.xml</id><title type="html">inahjeon’s devlog</title><subtitle>Inah Jeon's personal blog</subtitle><entry><title type="html">fastpages 로 블로그 이사</title><link href="https://inahjeon.github.io/etc/2020/03/29/devlog.html" rel="alternate" type="text/html" title="fastpages 로 블로그 이사" /><published>2020-03-29T00:00:00-05:00</published><updated>2020-03-29T00:00:00-05:00</updated><id>https://inahjeon.github.io/etc/2020/03/29/devlog</id><content type="html" xml:base="https://inahjeon.github.io/etc/2020/03/29/devlog.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-29-devlog.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;블로그를 시작한 지 1년 반 정도 지나고 블로그를 새롭게 이사하게 되었습니다. :)&lt;/p&gt;
&lt;p&gt;그 동안 데이터 ml 관련 내용에 대해서 글을 작성하면서, 수식이나 그래프 등이 들어갈 때가 많은데 단순 마크다운 + 이미지를 삽입해서 글을 작성하다보니 번거로웠던 적이 많았습니다.&lt;/p&gt;
&lt;p&gt;그러던 중 fast.ai 에서 jupyter notebook 을 마크다운으로 변환하여 포스트를 작성할 수 있도록 해주는 &lt;a href=&quot;https://github.com/fastai/fastpages&quot;&gt;fastpages&lt;/a&gt; 라는 도구를 제공하고 있어서 사용해보았는데, 마음에 들어서 이사를 결심했습니다.&lt;/p&gt;
&lt;p&gt;전체적인 테마도 기존 블로그에 사용했던 테마와 비슷한 분위기인데, 가독성이 좀 더 올라간 느낌적인 느낌이 들어서 더 만족스러웠습니다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;fastpages&quot;&gt;fastpages&lt;a class=&quot;anchor-link&quot; href=&quot;#fastpages&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;fastpages는 &lt;a href=&quot;https://github.com/fastai/fastpages&quot;&gt;https://github.com/fastai/fastpages&lt;/a&gt; 레포에서 자세한 설명을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/77847215-4020b400-71f6-11ea-83f8-7ba36d731c28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;juputer notebook 으로 작성한 &lt;code&gt;.ipynb&lt;/code&gt; 파일을 GitHub Action 을 이용해서 markdown 으로 자동으로 변환해준다고 합니다. 심지어는 microsoft word 로 작성한 &lt;code&gt;.docx&lt;/code&gt; 도 변환해주네요&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;&amp;#48660;&amp;#47196;&amp;#44536;-&amp;#51060;&amp;#49324;&amp;#54616;&amp;#44592;&quot;&gt;&amp;#48660;&amp;#47196;&amp;#44536; &amp;#51060;&amp;#49324;&amp;#54616;&amp;#44592;&lt;a class=&quot;anchor-link&quot; href=&quot;#&amp;#48660;&amp;#47196;&amp;#44536;-&amp;#51060;&amp;#49324;&amp;#54616;&amp;#44592;&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;fastpages-&amp;#47196;-&amp;#48660;&amp;#47196;&amp;#44536;-&amp;#49373;&amp;#49457;&quot;&gt;fastpages &amp;#47196; &amp;#48660;&amp;#47196;&amp;#44536; &amp;#49373;&amp;#49457;&lt;a class=&quot;anchor-link&quot; href=&quot;#fastpages-&amp;#47196;-&amp;#48660;&amp;#47196;&amp;#44536;-&amp;#49373;&amp;#49457;&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/fastai/fastpages/generate&quot;&gt;https://github.com/fastai/fastpages/generate&lt;/a&gt; 로 블로그를 만들 새로운 repository 를 생성해줍니다.&lt;/p&gt;
&lt;p&gt;repository 를 생성하면, 정의된 GitHub Action 을 통해서 블로그 생성을 위한 PR이 자동으로 올라오게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/77847312-351a5380-71f7-11ea-8424-225552278408.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;PR 에서 시키는 대로 SSH key 를 생성하여 secret 과 deploy key 를 등록하고 PR 을 merge 하면 끝입니다.&lt;/p&gt;
&lt;h3 id=&quot;&amp;#47196;&amp;#52972;&amp;#50640;&amp;#49436;-&amp;#53580;&amp;#49828;&amp;#53944;&amp;#54644;&amp;#48372;&amp;#44592;&quot;&gt;&amp;#47196;&amp;#52972;&amp;#50640;&amp;#49436; &amp;#53580;&amp;#49828;&amp;#53944;&amp;#54644;&amp;#48372;&amp;#44592;&lt;a class=&quot;anchor-link&quot; href=&quot;#&amp;#47196;&amp;#52972;&amp;#50640;&amp;#49436;-&amp;#53580;&amp;#49828;&amp;#53944;&amp;#54644;&amp;#48372;&amp;#44592;&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;fastpages 로 만든 블로그를 로컬에서 서버를 띄워서 결과물을 확인해볼 수도 있습니다.&lt;/p&gt;
&lt;p&gt;fastpages 로 만든 레포에서 &lt;code&gt;make server&lt;/code&gt; 명령어를 치면 아래와 같이, &lt;code&gt;_notebooks&lt;/code&gt; 디렉토리 하위의 jupyter notebook 으로 작성된 파일들이 &lt;code&gt;markdown&lt;/code&gt; 파일로 변환되어 &lt;code&gt;/_posts&lt;/code&gt; 디렉토리 하위에 저장되고 &lt;code&gt;localhost:4000&lt;/code&gt; 에서 만들어진 블로그 포스트 내용을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/77847475-3e57f000-71f8-11ea-8791-7566ff28ad46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;notebook 파일을 markdown 변환하는 작업은 fast.ai 에서 개발한 &lt;a href=&quot;https://github.com/fastai/nbdev&quot;&gt;nbdev&lt;/a&gt; 라는 라이브러리를 사용하고 있습니다. 변환된 markdown 파일을 보면 notebook -&amp;gt; html 코드로 변환한 내용이 들어가 있는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
keywords: fastai
description: fast.ai 의 fastpages 를 사용하여 블로그를 이사하였습니다.
title: fastpages 로 블로그 이사
badges: true
comments: true
categories: [etc]
nb_path: _notebooks/2020-03-29-devlog.ipynb
layout: notebook
---

&amp;lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-03-29-devlog.ipynb
--&amp;gt;

&amp;lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&amp;gt;

    

&amp;lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&amp;gt;

&amp;lt;/div&amp;gt;
    

&amp;lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&amp;gt;&amp;lt;div class=&quot;inner_cell&quot;&amp;gt;
&amp;lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&amp;gt;
&amp;lt;p&amp;gt;블로그를 시작한 지 1년 반 정도 지나고 블로그를 새롭게 이사하게 되었습니다. :)&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;로컬에 띄워진 모습:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/77847831-e79fe580-71fa-11ea-9600-df42c85fced5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;파일이 제대로 변환되었는지 바로바로 확인해볼 수 있어서 좋네요.&lt;/p&gt;
&lt;h3 id=&quot;category-&amp;#51221;&amp;#47532;&quot;&gt;category &amp;#51221;&amp;#47532;&lt;a class=&quot;anchor-link&quot; href=&quot;#category-&amp;#51221;&amp;#47532;&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Latex-&amp;#49688;&amp;#49885;-&amp;#53580;&amp;#49828;&amp;#53944;&quot;&gt;Latex &amp;#49688;&amp;#49885; &amp;#53580;&amp;#49828;&amp;#53944;&lt;a class=&quot;anchor-link&quot; href=&quot;#Latex-&amp;#49688;&amp;#49885;-&amp;#53580;&amp;#49828;&amp;#53944;&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Inline math: $f(x)$&lt;/p&gt;
&lt;p&gt;Full line math:&lt;/p&gt;
&lt;p&gt;
$$ \sum_{i=1}^\infty f(x) $$
&lt;/p&gt;
&lt;p&gt;짱편하다....ㅠ&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">코로나로 인해 재택근무를 하며 느낀점</title><link href="https://inahjeon.github.io/diary/2020/03/01/work-from-home.html" rel="alternate" type="text/html" title="코로나로 인해 재택근무를 하며 느낀점" /><published>2020-03-01T12:23:00-06:00</published><updated>2020-03-01T12:23:00-06:00</updated><id>https://inahjeon.github.io/diary/2020/03/01/work-from-home</id><content type="html" xml:base="https://inahjeon.github.io/diary/2020/03/01/work-from-home.html">&lt;p&gt;&lt;a href=&quot;https://search.naver.com/search.naver?sm=top_hty&amp;amp;fbm=1&amp;amp;ie=utf8&amp;amp;query=%EC%BD%94%EB%A1%9C%EB%82%98&quot;&gt;코로나 19&lt;/a&gt; 사태로 인해 갑작스럽게 이번주 화요일부터 다음주까지 전사 재택근무를 하게 되었다. 재택근무를 처음 해보기도 하고 갑작스럽게 결정되어 약간의 걱정 반, 기대 반으로 재택근무를 시작하게 되었다.&lt;/p&gt;

&lt;p&gt;이번주는 아직 첫 주라 그런지 대체로 만족스러웠던 것 같다. 😀&lt;/p&gt;

&lt;p&gt;앞으로 회사에서도 점차 리모트 근무를 도입할 계획도 가지고 있어, 이번주 재택근무를 해보면서 느꼈던 점들을 잘 기록해두기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;재택근무를-하며-달라진-점들&quot;&gt;재택근무를 하며 달라진 점들&lt;/h2&gt;

&lt;h3 id=&quot;1-출퇴근&quot;&gt;1. 출/퇴근&lt;/h3&gt;

&lt;p&gt;재택근무의 장점은 뭐니뭐니해도 출퇴근 시간이 사라진다는 게 가장 큰 장점인 것 같다.&lt;/p&gt;

&lt;p&gt;리모트 근무 시 출퇴근 관리는 출퇴근 관리 앱을 통해서 이루어진다. 현재 우리 회사에서는 출퇴근, 업무 시간, 야간 근무 요청 등은 출/퇴근 관리 앱인 &lt;code class=&quot;highlighter-rouge&quot;&gt;시프티&lt;/code&gt;를 사용하고 있다. 시프티앱을 켜서 출근하기 / 퇴근하기 버튼을 누르면 출퇴근 표시가 되는 방식이다. 이건 사무실에 출근할 때도 동일하다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;장점&lt;/code&gt; 👍: &lt;strong&gt;돈과 시간이 절약된다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1초 만에 출/퇴근이 가능하다. 집에서 회사까지 door-to-door 로 대략 40분정도 걸리고, 출근 준비하는데 대략 40분 정도 걸리는데, 출/퇴근이 없어지니 하루 2시간 정도가 절약된다.&lt;/li&gt;
  &lt;li&gt;점심을 집에서 먹을 수 있어 돈과 시간이 절약된다. 집에서 요리 해먹는 걸 좋아해서 이 부분은 행복감 200% 다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;단점&lt;/code&gt; 👎: &lt;strong&gt;딱히 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래 단점들은 현재 사용하고 있는 출/퇴근 앱의 문제이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앱에서 출퇴근을 따로 요청하는 작업이 은근 귀찮다. 정책 상 회사 와이파이가 아닌 경우 출퇴근 요청을 따로 해야하는데, 요청 란에 필수로 의미 없는 출퇴근 사유도 써야 한다.&lt;/li&gt;
  &lt;li&gt;나는 출퇴근 요청만 하지만, 매번 팀원들의 출퇴근 요청을 승인하는 사람들은 매우 귀찮지 않을까 싶다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-회의-방식&quot;&gt;2. 회의 방식&lt;/h3&gt;

&lt;p&gt;회의는 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;행아웃 화상 미팅&lt;/code&gt;으로 이루어진다. 회의를 잡을 때 캘린더에 참석자들을 초대하고, 화상 미팅을 활성화하여 행아웃 링크를 공유하면 끝이다.&lt;/p&gt;

&lt;p&gt;원래 잡혀있던 회의 및 면접 등은 행아웃 화상 미팅으로 대체하고, 매일 업무 체크를 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;스탠드업 회의가 활성화&lt;/code&gt; 되었다. 오전에 팀끼리 15분 정도 간단히 진행할 업무, 어려운 점 등을 공유한다. 중간에 급하게 구두 논의가 필요할 때도 빠르게 미팅을 잡아서 논의할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;장점&lt;/code&gt; 👍: &lt;strong&gt;장소에 구애받지 않고, 바로 조용한 곳에서 회의를 할 수 있음.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;회사에서 종종 회의실을 구할 수 없어 여러 사람이 사용하는 열린 공간에서 미팅하게 되었을 때 회의에 집중하기 어려웠던 적이 있는데, 지금은 행아웃으로 필요한 때 당장 조용한 곳에서 미팅이 가능히다.&lt;/li&gt;
  &lt;li&gt;심지어 이번주에는 Tech 인원들이 모두 모여서 한 달간 성과를 공유하는 Tech all hands 행사가 있었는데, 행아웃을 통해 매우 원활하게 진행되었다. (채팅창에 깨알같은 드립들이 난무하며 지난 번 오프라인 행사 때 보다 더 분위기가 좋았다칸다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;단점&lt;/code&gt; 👎: &lt;strong&gt;슬랙을 자주 확인하게 됨.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든 커뮤니케이션을 슬랙으로 하고, 리모트를 할 때는 왠지 더 눈치가 보여서 바로 답장을 하지 않으면 안될 것 같아 슬랙을 너무 자주 확인하게 되는 것 같다. 집중하는 동안은 팀에 양해를 구하고 알림을 꺼두어야 겠다.&lt;/li&gt;
  &lt;li&gt;기본적으로 화상 미팅을 하는데, 카메라에 집안 풍경(?)이 일부 잡히게 되어 신경쓰여서 청소를 자주하게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사실 이번주는 팀에서 개발한 기능을 배포일정이 잡혀있던 주였어서 재택근무를 한다는 소식을 들었을 때 살짝 멘붕하기도 했었다. 성공적으로 배포하기 위해서 팀원 간 의사소통, 손발이 착착 잘 맞아야 하는데, 재택근무를 하게되면 이번주에 무사히 배포를 할 수 있을까 하는 걱정이 있었다.&lt;/p&gt;

&lt;p&gt;리모트를 위한 업무 시스템과, 서비스 배포 환경이 잘 갖춰진 탓인지, 무사히 사내 배포를 완료할 수 있었다. 배포 이후 버그도 있었지만, 버그 픽스도 시간 하루 정도로 생각보다 빠르게 해결될 수 있었다.
다음주에도 유저에게 배포되는 실서비스 배포도 안정적으로 진행해 볼 수 있을 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;3-업무-환경&quot;&gt;3. 업무 환경&lt;/h3&gt;

&lt;p&gt;코로나 때문에 시행하는 재택 근무라 아쉽게도 카페 리모트는 안되고 집에서만 일할 수 있다.&lt;/p&gt;

&lt;p&gt;업무 환경은 확실히 기존에 비해 아쉬운 점이 많은 것 같다. 사무실의 드넓은 책상과 편한 의자, 모니터, 커피, 간식 등이 다 사라졌다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;장점&lt;/code&gt; 👍: &lt;strong&gt;편안함. 스피커로 노래 틀기&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;노래 들을 때 에어팟을 장시간 끼고 있으면 귀가 아픈데, 집에서는 블루투스 스피커로 노래를 막 재생할 수 있어서 좋다.&lt;/li&gt;
  &lt;li&gt;원래 집순이라 그런지 밖에 나가면 지하철 타면서 기빨리고 에너지가 쭉쭉 빠지는 스타일인데, 집 안에서 근무하니 매우 편안하고 쾌적하게 일했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;단점&lt;/code&gt; 👎: &lt;strong&gt;사무실의 그 훌륭한 장비들을 사용하지 못한다. 그리고 커피가 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이번 주는 거의 복층 2층 책상에서 양반다리를 하고 일 했었는데, 몇 시간 앉아서 일하다보면 다리가 저려오고 허리가 아팠다. 일할 때는 확실히 편한 의자와 책상이 필요한 것 같다.&lt;/li&gt;
  &lt;li&gt;일할 때 커피를 내내 달고 있어서 하루에 보통 커피를 3잔 정도 마시는데, 집에는 커피가 없어 금방 금단 증상이 왔다. 얼른 집 앞 스타벅스에 커피를 사러 갔다 왔다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-업무-효율&quot;&gt;4. 업무 효율&lt;/h3&gt;

&lt;p&gt;일단 무엇보다 &lt;code class=&quot;highlighter-rouge&quot;&gt;업무 집중도는 2배 이상&lt;/code&gt; 올라간 것 같다. 그리고 회사에 출근했을 때는 출근해서 사무실에 있으니까 일 인정! 이런 느낌인데, 집에 있으니 조금이라도 쉬면 안될 것 같다는 생각에 오히려 눈치보여서 중간에 덜 쉬고 더 일하게 되었던 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;장점&lt;/code&gt; 👍: &lt;strong&gt;몰입이 잘 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사무실보다 몰입이 매우 잘 된다. 사무실에서는 여러 사람들이 움직이고, 말을 걸게되는 데, 혼자 집안에서 있으니 조용해서 일에 몰입이 잘되어 평소보다 빠르게 일을 쳐냈던 것 같다.&lt;/li&gt;
  &lt;li&gt;사무실에서는 누군가 말을 걸면 그 즉시 집중이 깨진다. 리모트를 할 때는 슬랙에서 누군가 말을 걸더라도 내가 하던 업무를 마무리하고 볼 수 있어서 몰입을 깨는 상황이 적은 것 같다.&lt;/li&gt;
  &lt;li&gt;집에서 일하는 습관이 드니, 주말에도 좀 더 부지런해진 것(?) 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;단점&lt;/code&gt; 👎: &lt;strong&gt;몰입이 너무 잘 된다. (?)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예전에는 집과 회사가 분리되어 퇴근하고 집에오면 푹 퍼져서 쉬었는데, 지금은 퇴근시간을 넘기고도 자연스럽게(?) 계속 일하게 되는 것 같다. 지금은 집 == 회사가 되어버려 의식적인 출/퇴근 구분이 필요할 것 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-건강&quot;&gt;5. 건강&lt;/h3&gt;

&lt;p&gt;아직은 그럭저럭 괜찮은 컨디션 유지중.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;장점&lt;/code&gt; 👍: &lt;strong&gt;피로감이 덜하다. 건강한 식사!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이번 주는 배포가 있어 어쩔 수 없이 거의 내내 밤 11시~12시 까지 야근을 했다. 그래도 출퇴근 시간이 없다보니 잠은 충분히 잘 수 있었어서, 평소 야근 했던 날에 비해 피로감이 덜하고 컨디션이 좋았다.&lt;/li&gt;
  &lt;li&gt;밥먹기 귀찮으면 편의점 김밥, 샌드위치 등으로 간단히 때우는 때가 많았는데, 점심/저녁 식사로 집밥을 먹게 된 점은 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;단점&lt;/code&gt; 👎: &lt;strong&gt;작은 외로움과 갑갑함. 그리고 허리 아픔.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;원래 외로움을 잘 타지 않는 성격인데, 다른 사람과 말할 일이 줄어들다보니 살짝 외로움이 생긴다.&lt;/li&gt;
  &lt;li&gt;집안에만 갇혀 있으니 갑갑하다. 이건 코로나 사태가 진정되면 해소될 것 같다.&lt;/li&gt;
  &lt;li&gt;집의 책상과 의자가 그리 좋지 않아 장시간 컴퓨터로 일하면 허리가 아프다. 집이 좁아 새로 구매하기는 어려우므로 의식적인 바른 자세와 틈틈히 스트레칭하는 것으로 이겨내야겠다. 💪&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다음주를-위한-업무-환경-개선&quot;&gt;다음주를 위한 업무 환경 개선&lt;/h2&gt;

&lt;p&gt;코로나 사태가 얼마나 지속될 지 모르겠다. 일단 우리 회사는 다음주까지 재택근무를 시행하기로 했으니, 다음주 쾌적한 근무를 위해 약간의 노력으로 업무 환경을 개선해보았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;약간의 리모델링(?)을 통해 업무 공간을 1층으로만 한정하도록 분리했다. 2층은 온전히 쉬는 공간으로 남겨두어야지 🤐&lt;/li&gt;
  &lt;li&gt;일하기 편한 책상과 의자는 조그만 집에 둘 데가 없어서 못샀다. 대신 일하는 책상을 높이가 낮아 허리 아팠던 바 테이블 대신 원래 집에 딸려 있던 좀 더 높이가 높은 책상으로 바꿨다. 내년에 투룸으로 이사하면 새로 사야겠다. 😞&lt;/li&gt;
  &lt;li&gt;이번 기회에 찜해두었던 네스프레소 커피 머신과 스타벅스 캡슐(개인적으로 Pike Place 맛이 제일 맛있는 것 같다)을 구매했다! 😎&lt;/li&gt;
  &lt;li&gt;퇴근과 동시에 슬랙 끄고 노트북 덮기. 그 외 시간에는 개인 맥북을 사용하도록 서랍장에 쳐박혀있던 개인 맥북을 부활 시켰다. 👩‍💻&lt;/li&gt;
  &lt;li&gt;개인적 취향으로 작은 맥북 화면에서 코딩할 때 집중이 잘 되기도 해서 모니터는 굳이 구매하지 않았다. 🙃&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;첫 주 재택근무를 해 본 결과, 단점들보다는 압도적인 장점(시간, 집중)들이 많아 아직은 재택근무에 대해서 만족스럽다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;외로움 및 갑갑함 해소를 위해 딱 하루 정도는 사무실에 출근해도 괜찮을 것 같다. 회사의 다른 분들은 이번 주 재택근무를 해보면서 어떻게 느꼈는지도 궁금하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;-그리고-뒤늦게-올려보는-깨알같은-회사-홍보&quot;&gt;+) 그리고 뒤늦게 올려보는 깨알같은 회사 홍보&lt;/h4&gt;

&lt;p&gt;코로나에도 당황하지않고 하루만에 스무스한 재택근무 &amp;amp; 리모트 근무가 가능한 &lt;a href=&quot;https://career.banksalad.com/&quot;&gt;뱅크샐러드&lt;/a&gt; ! &lt;del&gt;에 지원하실 때 추천인 코드는 @전인아로 해주시면 채용보상금 반띵해드립ㄴ…&lt;/del&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">코로나 19 사태로 인해 갑작스럽게 이번주 화요일부터 다음주까지 전사 재택근무를 하게 되었다. 재택근무를 처음 해보기도 하고 갑작스럽게 결정되어 약간의 걱정 반, 기대 반으로 재택근무를 시작하게 되었다.</summary></entry><entry><title type="html">글또 4기를 시작하며</title><link href="https://inahjeon.github.io/diary/2020/03/01/start-geultto4.html" rel="alternate" type="text/html" title="글또 4기를 시작하며" /><published>2020-03-01T09:25:00-06:00</published><updated>2020-03-01T09:25:00-06:00</updated><id>https://inahjeon.github.io/diary/2020/03/01/start-geultto4</id><content type="html" xml:base="https://inahjeon.github.io/diary/2020/03/01/start-geultto4.html">&lt;p&gt;&lt;a href=&quot;https://bit.ly/geultto&quot;&gt;글또&lt;/a&gt; 4기를 시작하며.&lt;/p&gt;

&lt;h2 id=&quot;지난-글또-회고&quot;&gt;지난 글또 회고&lt;/h2&gt;

&lt;p&gt;재작년 11월 부터해서 2, 3기 글또에 참여했고, 덕분에 꾸준히 글쓰기를 하는 습관이 생겼습니다 :)&lt;/p&gt;

&lt;p&gt;작년에는 총 &lt;code class=&quot;highlighter-rouge&quot;&gt;21&lt;/code&gt;편의 글을 썼고, 거의 매달 한 두편의 글을 꼭 작성했어서 개인적으로 매우 뿌듯했습니다. 매번 글 쓰기 주제를 고민하면서 강제로 새로운 주제에 대해서 공부하고 성장한 점도 좋았습니다.&lt;/p&gt;

&lt;p&gt;2기에 비해서 3기 때는 스터디 모임등 글또 내 소모임도 생기고 중간에 오프라인 모임도 있어서 사람들끼리 더 화기애애했던 것 같습니다. 이번 4기에도 오프라인 모임을 많이 하고 사람들끼리도 더 친해졌으면 좋겠습니다. (지금은 코로나 때문에 ㅠㅠ) 글또 시스템이 매 기수 마다 점점 발전하는 것도 재밌네요.&lt;/p&gt;

&lt;h2 id=&quot;4기-글쓰기-계획&quot;&gt;4기 글쓰기 계획&lt;/h2&gt;

&lt;h3 id=&quot;예치금-모두-돌려받기&quot;&gt;예치금 모두 돌려받기&lt;/h3&gt;

&lt;p&gt;항상 세우는 계획이지만 2기, 3기 모두 실패했습니다. 이번에는 꼭…!&lt;/p&gt;

&lt;h3 id=&quot;개발--비개발글로-매주-글쓰기-개인적-목표&quot;&gt;개발 / 비개발글로 매주 글쓰기 (개인적 목표)&lt;/h3&gt;

&lt;p&gt;올해 계획에도 올렸지만, 작년보다 2배로 글 더 쓰기를 목표로 잡았습니다. 그래서 이번에는 매주 글쓰기를 해보려고 하는데, 한 주는 기존과 동일한 데이터 / 개발 관련 글, 한 주는 독후감, 어떤 주제에 대한 개인적인 생각 등 자유 주제의 짧은 글을 써보려고 합니다.&lt;/p&gt;

&lt;p&gt;회사일도 그렇고, 글 쓰는 주제도 데이터 쪽이 많다보니 너무 매몰된 것 같아, 스스로 좀 지루해지는 감이 있어서 다양한 주제로 제한없이 글을 써보면 재밌을 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;사이드-프로젝트-1개-이상-진행하고-글쓰기&quot;&gt;사이드 프로젝트 1개 이상 진행하고 글쓰기&lt;/h3&gt;

&lt;p&gt;2기, 3기를 할 때도 역시나 매번 진행해보려 마음먹었던 재밌는 사이드 프로젝트 진행하고 글쓰기.&lt;/p&gt;

&lt;p&gt;사이드 프로젝트 주제는 아직 아이디에이션 중입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;몇 개월째 벼르고 있는 개인 블로그 직접 개발하기&lt;/li&gt;
  &lt;li&gt;관심있는 주제 뉴스/페북글/소식 스크래핑해서 요약해주는 봇 만들기&lt;/li&gt;
  &lt;li&gt;가상화폐 거래소 API 활용해서 시세 예측하고 자동매매 봇 만들기 (&lt;del&gt;생계탈출 가즈아!&lt;/del&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;매일-조금씩-글쓰기&quot;&gt;매일 조금씩 글쓰기&lt;/h3&gt;

&lt;p&gt;2주마다 1편씩 쓰긴 했지만, 사실 2주 내내 쓰지는 않고 보통 하루, 몇시간 정도만 집중해서 글을 썼던 적이 많았습니다. 그러다보니 빠르게 글을 쓸 수 있는 주제를 선택하게되고, 좀 더 퀄리티 있는 글을 못 썼던 것 같아서 아쉬움이 많이 남았습니다.&lt;/p&gt;

&lt;p&gt;이번에는 주제를 미리 생각하고, 매일매일 꾸준히 글을 써보려합니다. 저녁에 1시간 정도씩만 투자해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;1일 1 commit에 도전!&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;이번-글또-4기-에서는&quot;&gt;이번 글또 4기 에서는…&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;4기 들어서 글또 노션 페이지가 생겼어요 -&amp;gt; &lt;a href=&quot;https://bit.ly/geultto&quot;&gt;글또&lt;/a&gt; 😀 글또 모임의 규칙, 지난 활동들, 글쓰기 자료, 로고 등에 대해 잘 소개되어있어요.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;글또 로고(3기 어느 금손님이 만드신)도 생겼어요. 짱이쁨. 😍&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/75620559-8968ee00-5bcd-11ea-89a9-9000a8bc6dc5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;글또 4기에서는 필요한 자동화 툴을 개발하는 자동화팀과 내부 오프라인 모임, 행사를 기획하는 운영팀이 생겼습니다. 🛠 4기 때는 더 재미있을 것 같네요!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;깨알자랑&lt;/del&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">글또 4기를 시작하며.</summary></entry><entry><title type="html">Hidden Technical Debt in Machine Learning Systems</title><link href="https://inahjeon.github.io/ml%20&%20data%20engineering/2020/02/16/technical-dept-in-ml-systms.html" rel="alternate" type="text/html" title="Hidden Technical Debt in Machine Learning Systems" /><published>2020-02-16T12:47:00-06:00</published><updated>2020-02-16T12:47:00-06:00</updated><id>https://inahjeon.github.io/ml%20&amp;%20data%20engineering/2020/02/16/technical-dept-in-ml-systms</id><content type="html" xml:base="https://inahjeon.github.io/ml%20&amp;%20data%20engineering/2020/02/16/technical-dept-in-ml-systms.html">&lt;p&gt;ML 서비스를 Production 에 적용하기 시작하면서, &lt;a href=&quot;https://martinfowler.com/articles/cd4ml.html&quot;&gt;CD4ML&lt;/a&gt;, ML Ops 에도 관심이 많이 생겨서 차근차근 공부해보려고 합니다.&lt;/p&gt;

&lt;p&gt;나온지 꽤 되긴 했는데 MLOps 관련 많은 article 들에서 읽어볼 것을 추천하고 있는, &lt;a href=&quot;https://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf&quot;&gt;Hidden Technical Debt in Machine Learning Systems (2015)&lt;/a&gt;(ML system 에서의 기술 부채에 대해 Google 에서 작성한 유명한 논문) 를 찬찬히 읽어보고 적당히 의역 및 요약해보았습니다. (정확한 내용은 원문을 참고해주세요.)&lt;/p&gt;

&lt;p&gt;영어가 짧아서 논문을 읽고 저만의 언어(?)로 번역해보는 일은 시간이 꽤 걸렸지만, 그냥 슥 읽어보는 것보다 더 꼼꼼하고 깊게 읽어 보게 되어서 공부하는데 도움은 많이 되었습니다. :)&lt;/p&gt;

&lt;h2 id=&quot;1-introduction---ml-시스템에서의-기술적-부채&quot;&gt;1. Introduction - ML 시스템에서의 기술적 부채&lt;/h2&gt;

&lt;h3 id=&quot;technical-debt-기술-부채-란&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Technical_debt&quot;&gt;Technical Debt (기술 부채)&lt;/a&gt; 란?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ward Cunningham 이 제시한 비유적 표현으로, software engineering 관점에서 기존의 시스템에 축적되어서 새로운 기능을 추가하거나, 변경 / 유지보수 할 때 이를 어렵게 만드는 요소들로, 금융에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;부채&lt;/code&gt;와 비슷한 개념으로 바라볼 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;기술 부채는 대략 다음의 한 짤로 요약됩니다…&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/863/1*55Jn564sqMdKT39XIW3uxQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Software engineering에서와 마찬가지로 라이브 시스템에 ML 을 적용하기 시작하면서 ML system 에서도 &lt;code class=&quot;highlighter-rouge&quot;&gt;개발과 배포에 걸리는 시간은 상대적으로 빠르고 저렴하지만, 이를 유지보수하는 것은 어렵고 비용이 많이 들게되는&lt;/code&gt; 현상이 광범위하게 발생하고 있습니다.&lt;/p&gt;

&lt;p&gt;특히 ML system 에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;전통적인 코드를 유지 보수하는 문제에 추가로 ML에 특정된 이슈들로 인한 기술적 부채들도 발생&lt;/code&gt;합니다. 그런데 이런 기술 부채들은 코드 레벨보다는 &lt;code class=&quot;highlighter-rouge&quot;&gt;시스템 레벨에 존재&lt;/code&gt;하기 때문에 감지하기 어렵습니다. ML 시스템에서 코드 외 &lt;code class=&quot;highlighter-rouge&quot;&gt;시스템에서 흘러가는 데이터&lt;/code&gt; 때문에 전통적인 추상화 경계(abstraction boundaries)가 깨지기 쉽고, 코드 레벨의 기술부채를 갚는 전형적인 방법들 (e.g. 리팩토링, 테스트코드 작성 등)로는 ML system의 부채를 해결하는데 충분하지 않습니다.&lt;/p&gt;

&lt;p&gt;이 논문에서는 ML 기술 부채가 빠르게 축적될 수 있는 ML system 내의 시스템 레벨의 상호작용과 인터페이스에 집중하여 ML 기술 부채를 발생시키는 요소들에 대해 제시하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;2-complex-models-erode-boundaries&quot;&gt;2. Complex Models Erode Boundaries&lt;/h2&gt;

&lt;p&gt;전통적인 software engineering에서는 캡슐화(encapsulation)와 모듈 디자인(modular design)를 사용한 강한 추상화 경계(abstraction boundaries)를 통해 유지보수가 가능한 코드를 만들고, 독립된 작은 변화와 개선을 만들기 쉽게 합니다. 엄격한 추상화 경계는 인풋과 아웃풋에 대한 일관성을 가지게 합니다.&lt;/p&gt;

&lt;p&gt;그러나 ML 시스템에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;설계했던 동작이 외부의 데이터 의존성을 제외하고 소프트웨어 로직만으로는 효과적으로 표현 될 수 없기 때문에&lt;/code&gt; 엄격한 추상화 경계를 적용하기 어렵고, 이로 인해 심각한 기술 부채를 만들 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;entanglement&quot;&gt;Entanglement&lt;/h3&gt;

&lt;p&gt;ML 시스템에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;입력값들이 서로 복잡하게 얽혀있기 때문에, 독립적으로 개선 하기 어렵&lt;/code&gt;습니다. 예를 들어 x_1, … , x_n 의 feature를 사용하는 모델에서 만약 x_1 의 입력 분포를 바꾸는 경우, 나머지 모든 n-1개의 feature 들의 가중치, 사용 여부 등이 모두 바뀌게 됩니다. 새로운 n+1 번째 feature 를 추가하거나, 특정 feature x_j 를 제거하는 경우도 마찬가지 입니다.&lt;/p&gt;

&lt;p&gt;이 논문에서는 이러한 경우를 CACE (&lt;code class=&quot;highlighter-rouge&quot;&gt;Changing Anything Changes Everything&lt;/code&gt;) 원칙으로 명명했습니다. CACE 원칙은 입력값에 대해서 뿐아니라, 하이퍼파라미터, 학습에 필요한 설정들, 샘플링 방법등 ML system 의 모든 가능한 작업에 적용될 수 있습니다.&lt;/p&gt;

&lt;p&gt;이에 대한 해결책으로 한 가지 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;모델을 독립적으로 구성하고 ensemble한 결과를 제공하는 것&lt;/code&gt;입니다. Ensemble 은 문제가 sub task 들로 자연스럽게 잘 나뉘어질 수 있을 때 적용하기 좋고, 많은 케이스에서 ensemble은 잘 동작합니다. 그렇지만 ensemble 역시 모델이 얽혀있기 때문에, 개별 모델의 정확도 개선이 전체적인 시스템의 정확도를 낮추는 결과를 초래할 수 도 있습니다.&lt;/p&gt;

&lt;p&gt;두 번째 가능한 전략으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;발생할 수 있는 예측에 대한 변화를 감지하는 것에 주력하는 것&lt;/code&gt;입니다. 고차원의 정보를 시각화 할 수 있는 도구를 활용하여, 영향들을 다양한 차원에서 나누어서 분석해볼 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;correction-cascades&quot;&gt;Correction Cascades&lt;/h3&gt;

&lt;p&gt;문제 A 를 풀기 위한 모델 m_a 가 존재하고 문제 A와 약간만 다른 문제 A’에 대한 모델이 필요할 때, 빠른 해결책으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;모델 m_a의 결과를 입력으로 사용하고 일부분만 재학습하여 m_a'&lt;/code&gt;를 만들 수 있습니다.&lt;/p&gt;

&lt;p&gt;그러나, 이렇게 만들어진 모델의 경우 모델 m_a에 대한 의존성을 가지고 있어 차후에 모델을 개선하기 위해 분석하는 비용이 많이 들게됩니다. 그리고 m_a’ 모델을 활용하여 다시 문제 A’‘에 적용하는 식으로 correction 모델들이 쌓여서 비용이 증가하게 됩니다. 또한 이런 correction cascade 들은 deadlock 을 발생시킬 수 있는데, 개별 모델의 정확도 개선이 전체 시스템 레벨의 정확도를 오히려 낮추게 될 수 있습니다. 이에 대해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;feature 를 추가하여 직접적으로 correction 을 학습시키거나, 또 다른 모델 A'를 직접 개발하는 비용을 들여서 완화&lt;/code&gt;할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;대략 문제 별로 그냥 모델을 따로 만들어라 하는 얘기 같음.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;undeclared-consumers&quot;&gt;Undeclared Consumers&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;SE에서도 물론 동일하게 발생하는 문제이지만, batch prediction 같이 결과값이 파일로 저장되어 사용될 수 있는 ML system의 경우 특히 주의해야 할 이슈인 것 같다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;모델 m_a를 통한 예측 결과값이 다른 시스템에서 쉽게 접근가능한 경우, 접근 제한이 없으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;선언하지 않은 소비자들이 모델의 결과값을 사용하게 되는 경우&lt;/code&gt;가 발생할 수 있습니다. 전통적인 software engineering 에서는 이 문제를 &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility debt&lt;/code&gt; 라고 부릅니다.&lt;/p&gt;

&lt;p&gt;선언하지 않은 consumer들은 모델 m_a와 특정 부분과의 숨겨진 밀접한 결합을 만들기 때문에, 작게는 (시스템 유지보수에 대한) 비용을 높이고, 최악의 경우는 위험할 수도 있습니다. 모델 m_a의 변화가 다른 어떤 부분에 의도하지 않은 영향을 끼칠 수 있습니다. 일반적으로 이러한 밀접한 결합은 비용을 증가시키고, 개선점을 m_a 에 적용하기 어렵게 만듭니다. 또한 이런 consumer 들은 4장에서 설명하는 숨겨진 피드백 루프를 만들 수도 있습니다.&lt;/p&gt;

&lt;p&gt;Undeclared consumer 들은 엄격한 &lt;code class=&quot;highlighter-rouge&quot;&gt;service-level agreements (SLAs)&lt;/code&gt; 같은 강력한 가드 가드 없이는 감지하기 어렵습니다.&lt;/p&gt;

&lt;h2 id=&quot;3-data-dependencies-cost-more-than-code-dependencies&quot;&gt;3. Data Dependencies Cost More than Code Dependencies&lt;/h2&gt;

&lt;p&gt;전통적인 소프트웨어 엔지니어링에서 코드를 복잡하게 하고 기술 부채를 발생시키는 주요 요소로 &lt;code class=&quot;highlighter-rouge&quot;&gt;dependency dept&lt;/code&gt;를 꼽고 있습니다. ML 시스템에서도 이와 비슷하게 기술 부채를 발생시키면서 감지하는 것도 더 어려운 &lt;code class=&quot;highlighter-rouge&quot;&gt;data dependency&lt;/code&gt; 가 존재합니다. 코드 의존성의 경우 compiler, linker 등 static analysis 를 통해 확인할 수 있습니다. 데이터 의존성의 경우도 의존성을 파악할 수 있는 도구가 없다면, 대규모의 해결하기 어려운 데이터 의존성을 쌓기 쉽습니다.&lt;/p&gt;

&lt;h3 id=&quot;unstable-data-dependencies&quot;&gt;Unstable Data Dependencies&lt;/h3&gt;

&lt;p&gt;모델에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;다른 시스템에서 만든 출력값을 모델의 입력값으로 사용하게 되는 경우가 많은데, 이런 경우 시간의 흐름에 따라 질적으로, 양적으로 변화하는 unstable 한 입력값&lt;/code&gt;이 될 수 있습니다. 예를 들어 다른 모델의 출력 값을 입력값으로 사용하는 경우 해당 모델이 변경됨에 따라 출력값이 암묵적으로 바뀔 수 있습니다. 이러한 입력값의 변화는 이를 사용하는 시스템에서 감지하기 어렵기 때문에 위험합니다.&lt;/p&gt;

&lt;p&gt;이에 대한 한 가지 해결 전략으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터에 대해 versioned copy 를 만들어 데이터 의존성을 해결하는 방법&lt;/code&gt;이 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;예전에 데이터 버전 관리 툴 &lt;a href=&quot;https://inahjeon.github.io/dvc/&quot;&gt;DVC&lt;/a&gt; 사용해보고 작성한 글 참고&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;underutilized-data-dependencies&quot;&gt;Underutilized Data Dependencies&lt;/h3&gt;

&lt;p&gt;코드에서 underutilized dependencies는 사용되지 않는 package들을 의미합니다. 이와 유사하게, &lt;code class=&quot;highlighter-rouge&quot;&gt;underutilized data dependencies 는 모델에서의 이득이 거의 없는 입력값들을 의미&lt;/code&gt;합니다. 이러한 입력값들은 ML system 에서 불필요하게 변화에 취약하게 만들고, 치명적으로 만들 수 있습니다.&lt;/p&gt;

&lt;p&gt;Underutilized Data Dependencies는 다음의 경우에서 발생할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Legacy Features&lt;/strong&gt;: 가장 흔한 경우로써, feature F가 모델의 개발단계에서 포함되었다가 시간이 지나면서 새로운 feature에 의해 불필요하게 된 경우입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bundled Features&lt;/strong&gt;: 보통 마감 일정에 쫓겨서 모든 feature 를 bundle로 모델에 한꺼번에 추가하는 경우 발생하는데, 이때 특정 feauture 들은 적은 효과가 있거나 가치가 없는 feature 일 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ϵ-Features&lt;/strong&gt;: 모델의 정확도를 개선하기 위해 아주 작은 효과를 가지지만, 시스템의 복잡도를 크게 증가시킬 수 있는 feature를 포함시키려는 경우가 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Correlated Featuress&lt;/strong&gt;: 두 feature 가 강한 상관관계를 보이지만, 한 가지 feature가 직접적인 원인이 되는 경우가 많습니다. 많은 ML 방법들에서 이러한 특성을 감지하는 것은 어렵고, 두 feature를 동일하게 평가하거나 심지어는 직접적인 원인이 아닌 feature 를 택하는 경우가 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Underutilized Data Dependencies 는 leave-one-feature-out 평가를 통해 감지&lt;/code&gt;할 수 있고, 이러한 평가는 정기적으로 수행하고 불필요한 feature 들을 제거해야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;static-analysis-of-data-dependencies&quot;&gt;Static Analysis of Data Dependencies&lt;/h3&gt;

&lt;p&gt;전통적인 코드에서는 컴파일러와 빌드 시스템에서 의존성 그래프에 대해 정적 검사를 수행할 수 있습니다. 데이터 의존성에 대한 정적 분석 도구는 자동화된 feature 관리 같은 도구를 예를 들 수 있고, 아직 그리 많이 있지는 않습니다.&lt;/p&gt;

&lt;h2 id=&quot;4-feedback-loops&quot;&gt;4. Feedback Loops&lt;/h2&gt;

&lt;p&gt;Live ML 시스템에서 한 가지 중요한 특성은 &lt;code class=&quot;highlighter-rouge&quot;&gt;시간이 흐름에 따라 시스템의 동작이 다시 모델에 영향을 끼치게 되는 것&lt;/code&gt;입니다. 이러한 특성은 모델이 배포되기 전에는 시스템이 어떻게 동작할 지 예측하기 어려운 &lt;code class=&quot;highlighter-rouge&quot;&gt;analysys debt&lt;/code&gt; 를 발생시킬 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;모델이 데이터에 영향을 끼치고, 다시 그 데이터가 모델에 영향을 끼치는 건가 봉가&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Direct Feedback Loops&lt;/strong&gt;: 어떤 모델이 해당 모델에 사용할 미래의 학습 데이터를 선택하는데 직접적으로 영향을 끼질 수 있습니다. 이러한 문제는 supervised algorithm 에서 보통 bandit algorithm 을 통해 해결합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;뭔 말인지 모르겠음.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Hidden Feedback Loops&lt;/strong&gt;: 직접적인 피드백 루프는 분석하기 어렵지만, 적어도 통계학적으로 해결책을 찾아볼 수는 있습니다. 더욱 더 어려운 케이스는 실세계에서 간접적으로 서로 영향을 주고 있는 시스템들에서 발생하는 숨어있는 피드백 루프입니다. 예를 들어 웹 페이지의 facet을 결정하는 두 시스템 (보여줄 제품을 선택하는 시스템과 제품에 관련된 리뷰를 선택하는 시스템) 에서 한 시스템에서의 개선 사항은 다른 시스템에 영향 (유저가 특정 제품을 더 많이/적게 클릭하는 등)을 끼칠 수 있습니다. 이러한 &lt;code class=&quot;highlighter-rouge&quot;&gt;숨은 피드백 루프가 완전히 독립된 시스템 사이에서 발생&lt;/code&gt;한다는 사실을 유념해야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-ml-system-anti-patterns&quot;&gt;5. ML-System Anti-Patterns&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/74599412-be9d1880-50c4-11ea-919b-8d0971757405.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-world ML system 에서 실제 학습이나 예측에 사용되는 “ML 코드”가 차지하는 비중은 매우 적고, ML system 을 위해 요구되는 인프라는 매우 복잡합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;매우 진리이다. 한 백 번쯤 강조해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아래에서는 이러한 ML 시스템에서 반드시 피하거나, 리팩토링 되어야하는 몇 가지 &lt;code class=&quot;highlighter-rouge&quot;&gt;system-design anti-pattern&lt;/code&gt; 들에 대해 다룹니다.&lt;/p&gt;

&lt;h3 id=&quot;glue-code&quot;&gt;Glue Code&lt;/h3&gt;

&lt;p&gt;ML 연구자들은 독립된 package 형식으로 솔루션을 개발하려는 경향이 있고, 오픈소스 형태로 다양하게 존재하고 있습니다. 이러한 package들을 사용하게 될 경우, 보통 이 package를 사용하기 위해 데이터 입출력을 위한 대량의 지원 코드를 작성하게 됨으로써 &lt;code class=&quot;highlighter-rouge&quot;&gt;glue code system design pattern&lt;/code&gt; 으로 빠지게 합니다. Glue code 는 특정 package를 사용하도록 시스템을 종속시키게 되어 장기적으로는 비용이 큽니다.&lt;/p&gt;

&lt;p&gt;Glue code 문제를 해결하기 위한 한 가지 전략은 이러한 &lt;code class=&quot;highlighter-rouge&quot;&gt;black-box package 를 common API로 wrapping 하는 방법&lt;/code&gt; 이 있습니다. Common api 로 wrapping 하면 package의 변화에 따른 비용을 줄이고, 재사용성을 더 높일 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;pipeline-jungles&quot;&gt;Pipeline Jungles&lt;/h3&gt;

&lt;p&gt;Glue code의 특수한 케이스로, 데이터 전처리 단계에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;pipeline jungles&lt;/code&gt; 가 발생할 수 있습니다. Pipeline jungles 는 새로운 입력값이 식별되거나, 새로운 데이터 소스가 추가되면서 점차 발생하게 되는데, 여기에 주의를 기울이지 않으면 중간 파일 생성, join, 샘플링 등으로 점철된 데이터 전처리 정글을 만들게 됩니다.&lt;/p&gt;

&lt;p&gt;데이터 파이프라인들을 관리하고, 에러를 감지하고, 장애로부터 복구하는 작업은 모두 어렵고 비용이 많이 듭니다. 파이프라인들을 테스트할 때에도 보통은 비용이 많이 드는 통합 테스트까지 필요로 하는 경우가 많습니다. 이런 모든 것들이 기술적인 부채를 쌓고, 혁신을 만드는 비용을 더 크게 만듭니다.&lt;/p&gt;

&lt;p&gt;데이터를 수집하고 feature 를 추출하는 데 전체적으로 잘 생각해야만 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pipeline jungles&lt;/code&gt; 을 피할 수 있습니다.   &lt;code class=&quot;highlighter-rouge&quot;&gt;파이프라인을 재설계하고 백지상태에서 출발&lt;/code&gt;하는 방식은 실제로 현재 발생중인 비용을 줄이고, 혁신을 가속화하는데 효과적인 방식입니다.&lt;/p&gt;

&lt;p&gt;Glue code 와 pipeline jungle 현상은 &lt;code class=&quot;highlighter-rouge&quot;&gt;research 와 engineering 의 역할이 분리되어 있다는 점이 근본 원인&lt;/code&gt;일 수 있습니다. Researcher 와 engineer 들이 같은 팀에서 하이브리드로 연구하는 방식은 이러한 문제를 해결하는데 도움이 될 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;dead-experimental-codepaths&quot;&gt;Dead Experimental Codepaths&lt;/h3&gt;

&lt;p&gt;일반적으로 Glue code나 pipeline jungle 로 인해서 발생하는 결과는 &lt;code class=&quot;highlighter-rouge&quot;&gt;단기적으로 main production code의 조건분 분기로 실험 코드를 구현하여 실험을 진행하게 되는 것&lt;/code&gt;입니다. 어떤 개별 변동사항에 대해 이러한 접근방식은 전체 인프라를 건드리지 않기 때문에 상대적으로 적은 비용이 듭니다. 그렇지만, 시간이 흐르면서 이러한 분기 코드들은 이전 버전과의 호환성을 유지하는데 어려움을 증가시키거나, cyclomatic complexity 를 기하급수적으로 증가시킵니다.&lt;/p&gt;

&lt;p&gt;일반적인 소프트웨어 개발의 dead flag 와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;주기적으로 이러한 실험용 branch 들을 제거&lt;/code&gt;해야합니다. 실험들 중 매우 적은 실험 셋들만 실제로 사용되고, 대부분은 한번 테스트하고 버려지게 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단기적으로 실험한 코드 branch들 째깍째깍 잘 정리해야함.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;abstraction-debt&quot;&gt;Abstraction Debt&lt;/h3&gt;

&lt;p&gt;위에서 언급한 이슈들은 ML system 을 지원하기 위한 강력한 abstraction 이 없다는 사실을 강조하고 있습니다. 데이터의 흐름이나 모델, 예측을 설명하기 위한 적합한 인터페이스는 무엇일까요?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;논문에서 MR, Parameter-server 방식을 언급하긴 했지만, 특별한 해결책은 아직 없는 것 같음.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;common-smells&quot;&gt;Common Smells&lt;/h3&gt;

&lt;p&gt;소프트웨어 엔지니어링에서 흔히 특정 component 나 시스템에 존재하는 문제를 &lt;code class=&quot;highlighter-rouge&quot;&gt;smell&lt;/code&gt; 이라고 표현합니다. 본 논문에서는 몇 가지 &lt;code class=&quot;highlighter-rouge&quot;&gt;ML system 에서의 smell&lt;/code&gt; 들을 정의했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Plain-Old-Data Type Smell&lt;/strong&gt;: ML system에서 사용되고 생산되는 rich 정보들은 raw float 이나 interger와 같은 타입으로 인코딩되어 있습니다. 모델에서 이 정보가 의미하는 것이 무엇인지 (decision threshold 인지, log 승수인지) 명확하게 알아야하고, 데이터가 어떻게 생산되고 소비되어야하는지 알아야합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Multiple-Language Smell&lt;/strong&gt;: 특정 프로그래밍 언어가 특정 라이브러리나 구문을 사용하기 편리할 경우, 시스템의 한 부분만 다른 언어를 사용하려는 경우가 있습니다. 그러나 여러 개의 언어를 사용하는 것은 효과적으로 테스트 하는 비용을 증가시키고, service ownership을 넘기기 어렵게 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Prototype Smell&lt;/strong&gt;: 새로운 아이디어를 테스트 하기위해 작은 스케일로 프로토타이핑하는 것은 편리합니다. 그렇지만 프로토타이핑 환경에 자주 의존하는 것은 full-scale 시스템이 변화에 대응하기 어렵고, 더 나은 추상화나 인터페이스가 필요하다는 것을 나타내는 지표일 수 있습니다. 프로토타이핑을 위한 환경을 유지하는 것은 비용이 들고, 시간의 압박에 쫓겨 프로토타이핑 시스템을 production 시스템에 적용하려는 시도를 부추길 수도 있습니다. 게다가 작은 스케일에서의 실험은 실제 세계의 현실을 제대로 반영하지 못하는 경우가 많습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-configuration-debt&quot;&gt;6. Configuration Debt&lt;/h2&gt;

&lt;p&gt;기술 부채가 축적될 수 있는 또 하나의 영역은 &lt;code class=&quot;highlighter-rouge&quot;&gt;ML system 의 configuration&lt;/code&gt; 입니다. 대부분 대규모의 시스템에서 다양한 범위의 설정가능한 옵션 값들이 존재합니다. 이러한 설정값들은 특정 feature들에 대한 사용 여부, 데이터를 어떻게 선택할 지, 다양한 특정 알고리즘에 특화된 설정값들, 전처리 또는 후처리 등에 대한 값들을 포함합니다.&lt;/p&gt;

&lt;p&gt;연구자들이나 엔지니어 모두 이런 설정값을 관리하는 것은 보통 나중일로 생각하는 경향이 있고, 설정값을 검증하거나 테스트하는 작업은 중요하지 않게 보일 수도 있습니다. 활발하게 개발되고 있는 성숙한 시스템에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;설정을 위한 코드의 줄 수가, 실제 구동하는 코드의 줄 수보다 훨씬 많은 경우&lt;/code&gt;도 있습니다. 각각의 설정 코드들에는 실수들이 잠재적으로 포함되어 있을 수 있습니다.&lt;/p&gt;

&lt;p&gt;아래는 논문에서 제시하는 좋은 configuration system 에 대한 원칙들 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;설정 값을 이전 설정값에서 부터 약간의 변경만으로 쉽게 지정할 수 있어야 합니다.&lt;/li&gt;
  &lt;li&gt;수동적인 에러, 생략, 누락을 만들기 어려운 구조여야합니다.&lt;/li&gt;
  &lt;li&gt;두 모델 간 설정값 차이를 쉽게 시각적으로 볼 수 있어야 합니다.&lt;/li&gt;
  &lt;li&gt;설정값이 자동으로 assert 되고, 기본적인 값들 (사용하는 feature의 개수, transitive closure of data dependencies 등)이 자동으로 검증되어야 합니다.&lt;/li&gt;
  &lt;li&gt;사용되지 않는 불필요한 설정들을 감지할 수 있어야 합니다.&lt;/li&gt;
  &lt;li&gt;설정값은 전체 코드 리뷰 과정에서 리뷰되고, repository 에 merge되어야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-dealing-with-changes-in-the-external-world&quot;&gt;7. Dealing with Changes in the External World&lt;/h2&gt;

&lt;p&gt;ML system 이 매력적인 한 가지 이유는 외부 세계와 직접적으로 상호작용한다는 것입니다. 경험적으로, 외부 세계는 안정적인 경우가 매우 드물기 때문에, &lt;code class=&quot;highlighter-rouge&quot;&gt;외부 환경에 대한 변화로 인한 유지보수 비용이 지속적으로 발생&lt;/code&gt;합니다.&lt;/p&gt;

&lt;h3 id=&quot;fixed-thresholds-in-dynamic-systems&quot;&gt;Fixed Thresholds in Dynamic Systems.&lt;/h3&gt;

&lt;p&gt;ML system에서 스팸 메일인지, 정상 메일인지 예측하여 표시하거나, 특정 광고를 유저에게 표시할 지 말지 등 특정 ML 모델이 어떤 동작을 수행하게 하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;decision threshold&lt;/code&gt; 값 를 선택하는 경우가 많습니다. 한 가지 전통적인 방법은 가능한 임계값 범위 내에서 precision / recall 과 같은 tradeoffs 를 고려하여 하나를 택하는 방법이 있습니다.&lt;/p&gt;

&lt;p&gt;그런데 이러한 &lt;code class=&quot;highlighter-rouge&quot;&gt;임계값들을 대부분 수동적으로 설정하는 경우&lt;/code&gt;가 많습니다. 만약 모델이 새로운 데이터를 입력으로 받게되는 경우, 기존의 수동적으로 설정한 임계값은 유효하지 않을 수 있습니다. 또한, 많은 모델들의 임계값들을 수동으로 변경하는 일은 시간이 오래걸리고 다루기 힘든 작업입니다.&lt;/p&gt;

&lt;p&gt;이러한 문제를 해결하기 위한 한 가지 전략은, &lt;code class=&quot;highlighter-rouge&quot;&gt;검증 데이터 셋을 통해 임계값을 학습하게 하는 방식&lt;/code&gt; 을 사용할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;monitoring-and-testing&quot;&gt;Monitoring and Testing.&lt;/h3&gt;

&lt;p&gt;동작하고 있는 시스템에서 개별 component 들에 대해 unit test 및 end-to-end 테스트를 수행하는 것은 중요한 작업이지만, 변화하는 실 세계 환경에서 이러한 테스트들은 해당 시스템이 의도한 대로 잘 동작하고 있다는 것을 증명하기에는 불충분할 수 있습니다.&lt;/p&gt;

&lt;p&gt;장기적인 시스템 안정성에 대한 관점에서 자동화된 실시간 모니터링은 매우 중요합니다. 중요한 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;무엇을 모니터링 할 것인가?&lt;/code&gt; 입니다. ML system 에서는 테스트 해야하는 값이 명확하게 주어지지 않는 경우가 많습니다. 본 논문에서는 모니터링 해야하는 시작점으로 아래의 요소들에 대해 제시합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://developers.google.com/machine-learning/crash-course/classification/prediction-bias&quot;&gt;Prediction Bias&lt;/a&gt;&lt;/strong&gt;: ML system 이 의도한 대로 잘 동작하고 있다면, 시스템에서 예측하는 label 의 분포가 관측한 label 의 분포와 동일해야합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Prediction bias 를 측정하는 방안은 갑작스럽게 변경되는 외부의 변화를 감지하는데 유용&lt;/code&gt;하게 쓸 수 있습니다. 다양한 차원에서 prediction bias를 나눔으로써, 이슈를 빠르게 분리하고, 자동화된 알림으로 사용할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Action Limits&lt;/strong&gt;: ML system 에서 스팸 문자를 마킹하는 등의 특정 동작을 수행하는 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;동작에 대한 limit을 설정하는 방법&lt;/code&gt;은  sanity check 로 유용합니다. 만약 시스템에서 특정 동작에 대한 limit 을 넘어서는 경우, 자동 알림을 보내서 수동적으로 검사해볼 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Up-Stream Producers&lt;/strong&gt;: ML system에서 입력 데이터를 다양한 up-stream producer 들로 부터 수급받게 되는 경우가 많습니다. 이러한 up-stream process 들은 ML system의 요구사항을 포함한 서비스 레벨의 목적을 달성할 수 있도록 철저하게 모니터링되고 테스트되어야 합니다. 이러한 &lt;code class=&quot;highlighter-rouge&quot;&gt;up-stream 들의 failure에 대한 alert 또한 반드시 ML system의 control 전략에 포함되어야하고, 비슷하게 ML system 에서의 failure 역시 down-stream consumer 들에게 전파되어 down-stream consumer 들의 control 전략에 포함&lt;/code&gt;되어야 합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;외부의 변화는 실시간으로 일어나기 때문에, 이에 대한 반응 또한 실시간으로 발생합니다. 사람이 직접 개입해서 대응하는 것이 보통이지만, 빠르게 해결되어야하는 문제에 대해서는 취약할 수 있습니다. 사람이 직접 개입하지 않고 자동으로 변화에 대해 대응할 수 있는 시스템을 만드는 것은 투자할만한 가치가 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그런 시스템을 만드는 게 가능한가? 단순한 조치는 취할 수 있을 듯&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;8-other-areas-of-ml-related-debt&quot;&gt;8. Other Areas of ML-related Debt&lt;/h2&gt;

&lt;p&gt;그 밖에 ML 관련 기술 부채들에 대한 내용입니다.&lt;/p&gt;

&lt;h3 id=&quot;data-testing-debt&quot;&gt;Data Testing Debt.&lt;/h3&gt;

&lt;p&gt;데이터가 ML system 의 코드를 변경시키는 경우, 해당 코드에 대해서 반드시 테스트하고, 입력 데이터 또한 테스트하는 것은 매우 당연합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;기본적인 sanity 체크 및 입력 값의 분포의 변화에 대해 모니터링하기 위한 잘 설계된 테스트&lt;/code&gt; 가 유용하게 쓰일 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;reproducibility-debt&quot;&gt;Reproducibility Debt.&lt;/h3&gt;

&lt;p&gt;Scientist 로써, 실험을 다시 수행하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;비슷한&lt;/code&gt; 결과물을 얻는 것은 중요합니다. 그러나 real-world ML system 에서 Randomized 알고리즘의 사용, 초기 조건에 따른 의존성 등의 문제로 &lt;code class=&quot;highlighter-rouge&quot;&gt;strict reproducibility&lt;/code&gt; 를 가지도록 설계하는 것은 더욱 더 어렵습니다.&lt;/p&gt;

&lt;h3 id=&quot;process-management-debt&quot;&gt;Process Management Debt.&lt;/h3&gt;

&lt;p&gt;이 논문에 소개된 대부분의 사례들은 한 가지 모델을 유지보수 하기 위한 비용에 대해 말하고 있습니다. 그러나 성숙한 시스템의 경우는 수 십, 수 백개의 모델들이 동시에 실행됩니다. 이런 성숙한 시스템의 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;많은 비슷한 모델들의 congifuration 값들을 안전하게 자동적으로 변경하는 문제&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;비즈니스 우선순위가 다른 모델등 사이에서 리소스를 할당하고 조율하는 문제&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;production 데이터 파이프라인의 흐름을 시각화하고 blocker 들을 감지하는 문제&lt;/code&gt; 등 넓은 범위에 걸쳐 해결해야 할 다양하고 중요한 문제들이 있습니다. 또한, &lt;code class=&quot;highlighter-rouge&quot;&gt;장애 시 복구를 위한 tool을 개발&lt;/code&gt;하는 것도 매우 중요합니다.&lt;/p&gt;

&lt;h3 id=&quot;cultural-debt&quot;&gt;Cultural Debt.&lt;/h3&gt;

&lt;p&gt;ML research 와 engineering 사이에 큰 장벽이 있는 경우, 이러한 장벽은 장기적인 관점에서 생산성을 저하시킬 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;팀 차원에서 쓸모없는 feature 의 개수를 줄이고, 시스템의 복잡도를 낮추고, 재현성과 안정성을 개선하고, 시스템을 모니터링하는 것에 대해 보상하는 문화를 만드는 것이 중요&lt;/code&gt; 합니다.&lt;/p&gt;

&lt;h2 id=&quot;9-conclusions-measuring-debt-and-paying-it-off&quot;&gt;9. Conclusions: Measuring Debt and Paying it Off&lt;/h2&gt;

&lt;p&gt;기술 부채는 유용한 표현이지만, 기술적 부채에 대해 측정할 수 있는 구체적인 metric 까지는 제시하고 있지 않습니다. 다음과 같은 질문들을 통해 기술적 부채가 얼마나 존재하는지 대략적으로 파악해 볼 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;새로운 알고리즘적 접근이 얼마나 쉽게 full scale 에서 테스트 가능한가?&lt;/li&gt;
    &lt;li&gt;What is the transitive closure of all data dependencies? (&lt;del&gt;무슨 말인지 모르겠음&lt;/del&gt;)&lt;/li&gt;
    &lt;li&gt;시스템에 적용되는 새로운 변화에 대한 임팩트를 얼마나 정확하게 측정할 수 있는지?&lt;/li&gt;
    &lt;li&gt;특정 모델이나 입력값에 대한 개선이 다른 것들의 성능을 저하시키는지?&lt;/li&gt;
    &lt;li&gt;새로운 팀 멤버가 얼마나 빨리 업무에 적응할 수 있는가?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 논문을 통해 유지보수 가능한 ML 시스템 개발을 위한 더 나은 추상화, 테스팅 기법, 디자인 패턴들이 나오길 바라고, 논문에서 제시하는 가장 중요한 시사점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;engineer 와 researcher 모두 기술 부채에 대해 경계하고 고민해야한다는 점&lt;/code&gt; 입니다.&lt;/p&gt;

&lt;p&gt;정확도(accuracy)에서 작은 개선점을 얻을 수 있는 특정 research 솔루션이 전체 시스템의 복잡도을 매우 높이는 경우는 좋은 practice 가 될 수 없습니다.&lt;/p&gt;

&lt;p&gt;ML 관련된 기술 부채를 줄이기 위해서는 팀 문화를 바꾸는 차원의 특별한 노력이 필요합니다. 장기적으로 성공적인 ML팀이 되기 위해 이러한 노력에 대해 인식하고 우선순위화해서 업무를 진행하고, 이에 대해 보상하는 것이 중요합니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">ML 서비스를 Production 에 적용하기 시작하면서, CD4ML, ML Ops 에도 관심이 많이 생겨서 차근차근 공부해보려고 합니다.</summary></entry><entry><title type="html">2020년 계획</title><link href="https://inahjeon.github.io/diary/2020/01/16/2020plan.html" rel="alternate" type="text/html" title="2020년 계획" /><published>2020-01-16T06:45:00-06:00</published><updated>2020-01-16T06:45:00-06:00</updated><id>https://inahjeon.github.io/diary/2020/01/16/2020plan</id><content type="html" xml:base="https://inahjeon.github.io/diary/2020/01/16/2020plan.html">&lt;p&gt;2020년 새해 맞이 늦은 신년 계획&lt;/p&gt;

&lt;h1 id=&quot;happy-new-year-2020&quot;&gt;Happy New Year, 2020&lt;/h1&gt;

&lt;p&gt;새해 되자 마자 유행하고 있는 지독한 A형 독감에 걸려서 병가쓰고 3일째 방구석에서 골골대고 있다. 이렇게 며칠 간 아파본 것도 오래만인 것 같다 (독감은 거의 10년만..). 가끔씩 병가쓰고 한 일주일만 쉬어보고 싶다고 입버릇처럼 말하던 게 있었는데, 실제로 아프고나니 쉬기는 커녕 아무것도 못하겠고 그냥 빨리 나았으면 싶다. 먹고 자고 누워만 있었는데 2kg가 빠졌다(…)&lt;/p&gt;

&lt;p&gt;한 이틀 크게 앓고 나니 조금 회복되어서 미루고 있었던 늦은 새해 계획을 작성해보았다. (새해목표 0번은 건강 챙기기..)&lt;/p&gt;

&lt;h2 id=&quot;1-일찍-잠들기--칼퇴하기&quot;&gt;1. 일찍 잠들기 + 칼퇴하기&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;11시 이전에 잠들기&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;집중해서 일하고 칼퇴하기&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;나도 아침에 일찍 못일어나고 밤늦게까지 깨어있는 저녁형 인간이다. 거기다 가끔 야근을 하게되면 늦게 집에 들어가고 새벽에 잠들고, 늦은 출근을 하고, 또 야근을 하고,…의 반복이라 생활 패턴이 깨진적이 많았다. 매번 아침에 일찍 일어나야지 알람을 맞춰보지만, 그 전날 늦게 잤으니 아무리 의지력이 높아도 일어나기 힘들다.&lt;/p&gt;

&lt;p&gt;올해부터는 그냥 무리하지 않고 칼퇴하고 일찍 잠드는 것을 목표로 삼았다. 일찍 잠들기만해도 그냥 일찍 잘 일어나진다. 새해 버프(?) 때문인지 모르겠지만, 한 며칠 동안 밤 11시에 자고 5시반에 일어나는 것을 시도해보았는데 성공적이었다. 계속 하다가 몸이 적응하면 9시 출근 / 6시 퇴근으로 바꿔야지.&lt;/p&gt;

&lt;h2 id=&quot;2-꾸준히-운동하기&quot;&gt;2. 꾸준히 운동하기&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;일주일에 운동하는 횟수 3번으로 늘리기&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1년 간 운동 꾸준히 하기&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;술을 줄이기는 너무 어려워서 운동을 꾸준히 하기로 했다. 일주일에 2번 회당 6만원 하는 PT 수업은 돈이 아까우므로 어떻게든 잘 가게 되지만, 그 외 시간에 스스로 헬스장을 가진 않는다. 일주일 3회 운동이면 매우 도전적인 목표가 될 것 같다. 집에서 3분 거리 엎어지면 코 닿을 거리에 있는 헬스장인데, 막상 가면 열심히 하는데 가기가 너무 힘들다. 운동도 다른 사람이랑 내기하나 걸고 해야 잘 갈 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;3-꾸준히-글쓰기&quot;&gt;3. 꾸준히 글쓰기&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;글 40편 이상 작성하기&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;사이드 프로젝트 1개 이상 하기&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;작년에 이어 올해도 꾸준히 블로그에 글쓰기. 작년에는 총 21편 썼으니까 올해는 작년의 두 배정도만 쓰면 적당(?)할 것 같다. 2주마다 1편씩 쓰긴 했지만, 사실 2주 내내 쓰지는 않고 보통 하루, 몇시간 정도만 집중해서 글을 썼던 적이 많아서 좀 더 가능하지 않을까 싶다.&lt;/p&gt;

&lt;p&gt;글쓸 때 보통은 평소에 알고싶었던 주제를 공부한 내용이나, 새로운 ML, 데이터 분석 관련 라이브러리를 사용해본 내용, 컨퍼런스 다녀온 후기 등을 작성하곤 했었는데, 이번에는 작은 거라도 재밌는 프로젝트 하나를 진행해본 경험을 써보고 싶다.&lt;/p&gt;

&lt;h2 id=&quot;그-외-그냥-생각나는-하고-싶은-것들&quot;&gt;그 외 그냥 생각나는 하고 싶은 것들&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;아이패드로 코딩하기&lt;/li&gt;
  &lt;li&gt;투룸으로 이사하기. 복층은 계단이 위험하고 귀찮다.&lt;/li&gt;
  &lt;li&gt;도로연수 받고 운전하기. &lt;del&gt;차를 사기 위한 큰 그림.&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;개발 서적 외 책 읽기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;올해 계획은 이정도로만 세워두자. 올해는 또 올해의 새로운 일들이 많겠지.&lt;/p&gt;</content><author><name></name></author><summary type="html">2020년 새해 맞이 늦은 신년 계획</summary></entry><entry><title type="html">2019년 회고</title><link href="https://inahjeon.github.io/diary/2019/12/31/2019review.html" rel="alternate" type="text/html" title="2019년 회고" /><published>2019-12-31T13:30:00-06:00</published><updated>2019-12-31T13:30:00-06:00</updated><id>https://inahjeon.github.io/diary/2019/12/31/2019review</id><content type="html" xml:base="https://inahjeon.github.io/diary/2019/12/31/2019review.html">&lt;p&gt;2019년의 마지막 날 올해를 돌이켜보았다. 올해도 아무것도 안하고 무난무난하게 한 해를 보냈던 것 같지만 그래도 많은 일들이 있었구나 싶다.&lt;/p&gt;

&lt;h1 id=&quot;바이바이-2019&quot;&gt;바이바이 2019&lt;/h1&gt;

&lt;h2 id=&quot;1-이사-봉천역-to-증미역&quot;&gt;1. 이사: 봉천역 to 증미역&lt;/h2&gt;

&lt;p&gt;회사가 여의도로 이사를 하게 되면서 ( &lt;del&gt;이사하고 돼지머리 화면에 띄워놓고 기념사진 찍음&lt;/del&gt; ) 마침 나도 살던 곳이 계약 만료가 되어 이사를 하게 되었다. 비록 분명 두 달 전에 나간다고 했는데 집주인이 세입자 구할 때 까지 보증금을 못 빼준다고 으름장을 놓은 바람에 좀 짜증이 났지만.&lt;/p&gt;

&lt;p&gt;여의도 근처로 집을 알아보고 강서구로 오게되었는데, 일단 서울 중심부와 거리가 좀 있다보니 조건에 비해 가격이 저렴한 편이고 대부분 신축 건물이라서 매우 만족했다. 이번엔 대출받아서 전세로 계약했는데, 집주인(=은행)에게 바치는 월세가 이전보다 훨씬 줄어서 좋다. :)&lt;/p&gt;

&lt;p&gt;버킷리스트 중 하나였던 &lt;code class=&quot;highlighter-rouge&quot;&gt;복층 오피스텔 살기&lt;/code&gt; 도 이룰 수 있어서 너무 좋았다. 지금은 계단 오르내리기가 귀찮아져서 다음엔 아마 투룸으로 구할 듯 싶다.&lt;/p&gt;

&lt;h2 id=&quot;2-레이니스트-4년째-다니고-있는-고인물&quot;&gt;2. 레이니스트: 4년째 다니고 있는 고인물&lt;/h2&gt;

&lt;p&gt;엊그제 &lt;code class=&quot;highlighter-rouge&quot;&gt;12월 28일&lt;/code&gt; 입사일 기준 4년 째 회사를 다닌 날이었다. 입사 4주년 축하 공지가 올라와서 오늘이구나 했다. 회사가 7년정도 밖에 안되기도 했고, 그 동안 수 많은 사람들이 들어오고 나가고 하느라 오래된(?) 분들이 많지 않아서 고인물로 불리고 있다.&lt;/p&gt;

&lt;p&gt;나도 생각보다 오래다니고 있다는 생각이 든다. 보통 주변의 다른 개발자들이 2년마다 이직하는 걸 보면. 나도 회사를 나가고 다른 회사를 경험해보고 싶었던 적이 없진 않았지만 (&lt;del&gt;아니 종종&lt;/del&gt;), 그럼에도 계속 다니고 있는 건 여기도 매번 새로운 모습으로 변화하고 있어서 그런 것 같다.&lt;/p&gt;

&lt;p&gt;항상 새로운 시도를 하고 일이든 문화든 더 좋게 바꾸려고 노력하고, 앞으로 더 좋아질 것 같은데 하는 기대를 하고 좀 더 지켜봐야겠다는 생각을 하게 된다.&lt;/p&gt;

&lt;p&gt;올해는 내가 속한 기술부문에 변화가 매우 컸어서 (이전과 차원이 다른 정도의 훌륭함. 거의 뭐 실리콘밸리를 한국에서 구현하고 계시는 분이 있다. 존멋) 또 많이 배우고 감탄했던 것 같다. 이렇게 한번 더 뱅또속.&lt;/p&gt;

&lt;h2 id=&quot;3-런닝머신-엔지니어&quot;&gt;3. 런닝머신 엔지니어&lt;/h2&gt;

&lt;p&gt;올해는 또 &lt;code class=&quot;highlighter-rouge&quot;&gt;Data Scientist&lt;/code&gt; 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Machine Learning Engineer&lt;/code&gt; 로 직군을 변경했다. 전공이 컴퓨터공학 이기도하고, 회사에 오래 다니다보니 본업(?) 외 개발도 이것 저것 조금씩 기웃기웃해서 배우면서 엔지니어링 쪽에 재미를 많이 느끼고 있어서 나에게 더 맞을 것 같은 포지션으로 바꿨다. (&lt;del&gt;사실 서버개발자가 더 맞을지도 몰름&lt;/del&gt;)&lt;/p&gt;

&lt;p&gt;로컬에서 고정된 데이터 셋을 받아서 분석하고, 모델을 만들어서 돌려보는 작업은 어렵지 않지만, 어떤 머신러닝/딥러닝 모델이 production 제품에 적용되기까지는 매우 많은 엔지니어링 리소스가 필요하다.&lt;/p&gt;

&lt;p&gt;올해 초에 회사에서 유저의 금융 데이터로 서비스의 특정 기능에 필요한 모델링 업무를 주로 했었다. 그렇지만 만든 모델이 결국 서비스화까지는 되지 못했는데, 엔지니어링 쪽 인력과 인프라가 부족했던 원인이 컸었다. 그 점이 갑갑해서 아예 엔지니어링까지 다 해버리자 했던 마음이 컸던 것 같다. (=협업을 잘 못한다는 뜻)&lt;/p&gt;

&lt;p&gt;매일매일 새로운 힙-한 모델들이 만들어지고 퍼포먼스가 갱신되는 걸 보면서 신기하고 재밌지만, 개인적으로는 모델링/연구 보다는 이런 모델들을 잘 가져다가 어떤 재밌는 걸 만들어볼까 하는 데 관심이 많기도 하다.&lt;/p&gt;

&lt;p&gt;어쨌거나저쨌거나 지금 특정 기능을 위해 이번에 새롭게 만든 모델을 개발계에 배포하고 QA를 진행하고 있다. QA가 무사히 완료되고 내가 만든 모델이 처음으로 실 서비스까지 적용되어 배포되는 순간은 너무 기쁠 것 같다. (&lt;del&gt;난 개발자인가봐&lt;/del&gt;) 그래도 한번 이렇게 만들어 본 경험으로 다음번에는 더 쉽게 진행할 수 있을 것 같고, 인프라도 잘 구축해서 더욱 더 많은 모델을 서비스화하고 데이터로 멋진 서비스들을 많이 만들 수 있으면 좋겠다.&lt;/p&gt;

&lt;p&gt;아직은 생소한 직군이고 회사마다 하는 일의 범위나 역할이 다 다른 것 같지만 어떤 이름이 됬건간에 ML/DL을 이용한 서비스가 점점 많아지고 보편화되면서 이런 역할은 계속 수요가 증가하지 않을까 생각하고 있다.&lt;/p&gt;

&lt;h2 id=&quot;4-글또-활동-꾸준한-블로깅-훌륭&quot;&gt;4. 글또 활동: 꾸준한 블로깅 훌륭&lt;/h2&gt;

&lt;p&gt;작년 11월 개발자 글 쓰기 모임인 &lt;code class=&quot;highlighter-rouge&quot;&gt;글또&lt;/code&gt; 2기를 모집한다는 글을 보고 글또 활동을 시작하게 되었다. 글또에서는 6개월 동안 2주마다 블로그 글을 한 편씩 강제로(?) 작성하게 한다. 글쓰기를 강제하는 시스템 덕에 꾸준히 무언가를 하는 걸 잘 못하는 내가 1년간 글을 꾸준히 쓸 수 있는데 큰 도움이 되었다. :)&lt;/p&gt;

&lt;p&gt;2기로 처음 글또를 시작했을 때는 시작/회고글을 제외하고 6개월 간 총 6편의 글을 썼다. (읭?) 그래도 어느정도 습관이 생겼는지 3기 활동에서는 11편이다. &lt;strong&gt;2배 성장. 예!&lt;/strong&gt; 중간 쉬는 텀에도 글을 쓰긴 해서 2019년 작성한 모든 글을 세어보니 총 &lt;code class=&quot;highlighter-rouge&quot;&gt;21편&lt;/code&gt;이었다. 글을 세어보면서 11월을 빼고는 매달 한 두편의 글이 있어서 개인적으로 매우 뿌듯했다.&lt;/p&gt;

&lt;p&gt;3기에는 더 많은 사람들이 참여하고, 중간에 오프라인 모임도 가졌어서 더 좋았던 것 같다. 2기에서는 처음/끝에만 한번 모여서 인사만하고 주로 슬랙에서만 얘기했었는데, 이번에는 모임을 주도해주신 분들이 계셔서 직접 얼굴 보고 얘기나누고 재미있었다.&lt;/p&gt;

&lt;p&gt;난 절대절대 내 의지력을 믿지 못하기 때문에 아마 내년에도 모집한다면 참여하지 않을까싶다.&lt;/p&gt;

&lt;h2 id=&quot;5-pt-살려고-하는-운동&quot;&gt;5. PT: 살려고 하는 운동&lt;/h2&gt;

&lt;p&gt;작년에는 회사 근처 헬스장에서 1년간 PT를 끊어서 운동을 했었다. 올해는 회사가 여의도로 옮기게 되면서 자연스레 운동을 안 가게 되었는데, 운동을 안한 지 6개월 정도 지나니 서서히 살이 찌고 몸도 안 좋아졌다. 운동 다시 해야지 해야지 미루다가 11월에야 겨우 집 근처 헬스장에 새로 등록했다.&lt;/p&gt;

&lt;p&gt;역시나 그냥 헬스장만 등록했더니 딱 하루 가고 안 가게 되어서 그냥 PT를 질렀다. 가격은 회당 6만원. 그나마 저렴한 편이지만, 카드값 출혈이 상당했다. &lt;del&gt;이번 달은 굶어야한다.&lt;/del&gt; 비쌌지만, 이렇게 계속 운동 안하면 죽겠구나 싶어서 살려고 시작했다.&lt;/p&gt;

&lt;p&gt;그래서 지금은 꼬박꼬박 주 2회씩 운동을 나가고 있다. 근력 운동도 하지만 체형 교정도 받고 있어서 매우 만족하고 있다. 안그래도 평소 자세가 안 좋다보니 거북목, 굽은 어깨, 등등 허리도 아프고 몸이 안 좋았었는데, 조금씩 좋아지고 있다. 다이어트 목적 보다는 거의 재활운동…인 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;6-그-외&quot;&gt;6. 그 외&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;개발 서적 외 독서량이 매우 줄었다. 책 안 읽으면 바보된다.&lt;/li&gt;
  &lt;li&gt;퇴근 후 나의 술친구 &lt;code class=&quot;highlighter-rouge&quot;&gt;참피디&lt;/code&gt; 아저씨 최고임. 최고의 유투버.&lt;/li&gt;
  &lt;li&gt;올해의 지름: &lt;code class=&quot;highlighter-rouge&quot;&gt;4k 프로젝터&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;플스4 pro&lt;/code&gt; (특징: 귀찮아서 잘 안함) 닌텐도도 지르고 싶다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;집(통영)으로 가는 가장 빠른 길&lt;/strong&gt; 을 찾았다. 김포 공항에서 사천 공항으로 갔다가 집 가는 버스 타면 2시간 반이다. 시간이 반이다. 가격은 3배다.&lt;/li&gt;
  &lt;li&gt;심심해서 내가 좋아하고 자주 사용하는 제품을 만드는 회사들 해외주식투자를 소액으로 했는데, 괜찮은 투자였다. 더 많이 해봐야지.&lt;/li&gt;
  &lt;li&gt;이제 한달 택시비 거의 &lt;code class=&quot;highlighter-rouge&quot;&gt;20만원&lt;/code&gt; … 내년엔 그냥 도로 연수 받고 쏘카타자…&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1일 1커밋&lt;/code&gt; 도전 실패. 주말엔 쉬자.&lt;/li&gt;
  &lt;li&gt;사워맥주 맛나다. 회사 지하에 &lt;strong&gt;와인앤모어&lt;/strong&gt; 곧 오픈한다고 해서 매우 행복.&lt;/li&gt;
  &lt;li&gt;작년 11월에 조카가 태어났는데, 하루하루 커가는 모습이 매우매우매우 사랑스럽다.&lt;/li&gt;
  &lt;li&gt;미드 &lt;code class=&quot;highlighter-rouge&quot;&gt;실리콘밸리&lt;/code&gt; 정주행 시작. 꿀잼.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;이제 만 나이로도 어쩔 수 없는 빼박 30대…&lt;/del&gt; :(&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;2019 회고 글을 쓰면서 올해를 돌아보고 이런 저런 생각을 하다보니 내년엔 이래야지 저래야지 여러가지 생각이 떠오른다. 하지만 새해 계획은 새해 첫 날에 쓰는 게 제 맛이므로, 지금은 남은 2019년을 즐기고 내일 써야지.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">2019년의 마지막 날 올해를 돌이켜보았다. 올해도 아무것도 안하고 무난무난하게 한 해를 보냈던 것 같지만 그래도 많은 일들이 있었구나 싶다.</summary></entry><entry><title type="html">gRPC</title><link href="https://inahjeon.github.io/engineering/2019/12/08/grpc.html" rel="alternate" type="text/html" title="gRPC" /><published>2019-12-08T19:55:00-06:00</published><updated>2019-12-08T19:55:00-06:00</updated><id>https://inahjeon.github.io/engineering/2019/12/08/grpc</id><content type="html" xml:base="https://inahjeon.github.io/engineering/2019/12/08/grpc.html">&lt;p&gt;tensorflow serving에서 제공하는 gRPC 통신을 사용해보기전 간단히 gRPC에 대한 개념을 공부하고, 간단한 예제를 구현해보았습니다.&lt;/p&gt;

&lt;h2 id=&quot;grpc&quot;&gt;gRPC&lt;/h2&gt;

&lt;p&gt;RPC는 RPC(Remote Procedure Call)는 원격 컴퓨터나 프로세스에 존재하는 함수를 호출하는데 사용하는 프로토콜입니다. 원격에 있는 함수를 동일 프로세스에 존재하는 함수를 호출하는 것 처럼 직접 호출할 수 있습니다. gRPC는 Google 의 RPC 구현체입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grpc.io/img/landing-2.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 gRPC는 서비스 인터페이스와 메시지의 구조를 모두 설명하기 위해 ProtoBuf 를 IDL (Interface Definition Language)로 사용합니다. ProtoBuf는 구글에서 만들고 사용하는 데이터 직렬화 라이브러리 입니다. IDL로 정의된 메시지를 기반으로 protoc 라는 컴파일러를 사용해서 원하는 언어의 코드를 생성할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/70392696-06008c00-1a26-11ea-9a29-fad25234550c.png&quot; alt=&quot;&quot; /&gt;
(gRPC와 JSON을 사용 하는 HTTP Api 간 비교표)&lt;/p&gt;

&lt;p&gt;gRPC에 대한 더 자세한 소개와 장점에 대해서는 &lt;a href=&quot;https://medium.com/@goinhacker/microservices-with-grpc-d504133d191d&quot;&gt;https://medium.com/@goinhacker/microservices-with-grpc-d504133d191d&lt;/a&gt; 에 잘 설명되어있습니다.&lt;/p&gt;

&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/grpc/grpc/tree/v1.25.0/examples/python/route_guide&quot;&gt;https://github.com/grpc/grpc/tree/v1.25.0/examples/python/route_guide&lt;/a&gt; 을 참고하여 간단한 예제를 만들어보았습니다.&lt;/p&gt;

&lt;p&gt;먼저 필요한 라이브러리 설치를 위해 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;grpcio-tools&lt;/code&gt; 를 설치해 줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install grpcio-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제에서는 gRPC 통신을 통해 두 수의 합을 구해주는 서비스를 제공하는 서버와, 클라이언트를 구현합니다.&lt;/p&gt;

&lt;h3 id=&quot;serviceproto&quot;&gt;service.proto&lt;/h3&gt;

&lt;p&gt;먼저 protos 디렉토리 아래 &lt;code class=&quot;highlighter-rouge&quot;&gt;service.proto&lt;/code&gt;라는 파일을 만들어서 두 수의 합을 구하는 서비스의 인터페이스와 message의 형태를 정의합니다.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;proto3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rpc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음에서 구현할 서버와 클라이언트에서 위 service.proto 에 명세 대로 gRPC를 이용하여 통신하게 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;run_codegenpy&quot;&gt;run_codegen.py&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grpc_tools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protoc&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;protoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'-Iprotos'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'--python_out=python_out'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'--grpc_python_out=python_out'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'protos/service.proto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;protos/service.proto&lt;/code&gt; 에 정의된 명세대로 python stub 코드를 &lt;code class=&quot;highlighter-rouge&quot;&gt;python_out&lt;/code&gt; 이라는 디렉토리에 생성해주는 코드입니다.&lt;/p&gt;

&lt;p&gt;run_codegen.py 을 통해 만들어지는 코드는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python_out/service_pb2.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service.proto
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'latin1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.protobuf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descriptor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.protobuf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_message&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.protobuf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reflection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reflection&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.protobuf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol_database&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_symbol_database&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @@protoc_insertion_point(imports)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_sym_db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_symbol_database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;




&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'service.proto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'proto3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_pb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;service.proto&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12\x04&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\x1c\n\x04\x44\x61&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12\t\n\x01\x61\x18\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x05\x12\t\n\x01\x62\x18\x02&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x05\&quot;\x12\n\x03&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12\x0b\n\x03&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x18\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x05\x32&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\x04&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\x06&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GetSum&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.test.Data&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x1a\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.test.Sum&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\x00\x62\x06&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;proto3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;




&lt;span class=&quot;n&quot;&gt;_DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;containing_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Data.a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;has_default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containing_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;is_extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension_scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Data.b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;has_default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containing_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;is_extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension_scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nested_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;is_extendable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'proto3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extension_ranges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;oneofs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;_SUM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;containing_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Sum.sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;has_default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containing_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;is_extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension_scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nested_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;is_extendable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'proto3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extension_ranges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;oneofs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_types_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_DATA&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_types_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SUM&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_sym_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterFileDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reflection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeneratedProtocolMessageType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'DESCRIPTOR'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'__module__'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'service_pb2'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# @@protoc_insertion_point(class_scope:test.Data)
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_sym_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reflection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeneratedProtocolMessageType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'DESCRIPTOR'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'__module__'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'service_pb2'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# @@protoc_insertion_point(class_scope:test.Sum)
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_sym_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;n&quot;&gt;_TEST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GetSum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Test.GetSum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;containing_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_sym_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterServiceDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_TEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;services_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_TEST&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# @@protoc_insertion_point(module_scope)
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python_out/service_pb2_grpc.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service.proto
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'latin1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.protobuf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descriptor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.protobuf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_message&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.protobuf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reflection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reflection&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.protobuf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol_database&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_symbol_database&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @@protoc_insertion_point(imports)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_sym_db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_symbol_database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;




&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'service.proto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'proto3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_pb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;service.proto&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12\x04&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\x1c\n\x04\x44\x61&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12\t\n\x01\x61\x18\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x05\x12\t\n\x01\x62\x18\x02&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x05\&quot;\x12\n\x03&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12\x0b\n\x03&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x18\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x05\x32&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\x04&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\x06&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GetSum&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x12\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.test.Data&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x1a\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.test.Sum&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\x00\x62\x06&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;proto3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;




&lt;span class=&quot;n&quot;&gt;_DATA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;containing_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Data.a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;has_default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containing_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;is_extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension_scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Data.b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;has_default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containing_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;is_extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension_scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nested_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;is_extendable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'proto3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extension_ranges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;oneofs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;_SUM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;containing_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Sum.sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;has_default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containing_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;is_extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension_scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nested_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;is_extendable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'proto3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extension_ranges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;oneofs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_types_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_DATA&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_types_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SUM&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_sym_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterFileDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reflection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeneratedProtocolMessageType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'DESCRIPTOR'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'__module__'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'service_pb2'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# @@protoc_insertion_point(class_scope:test.Data)
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_sym_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_reflection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeneratedProtocolMessageType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'DESCRIPTOR'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'__module__'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'service_pb2'&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# @@protoc_insertion_point(class_scope:test.Sum)
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_sym_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;n&quot;&gt;_TEST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialized_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_descriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GetSum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.Test.GetSum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;containing_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serialized_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_sym_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterServiceDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_TEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DESCRIPTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;services_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_TEST&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# @@protoc_insertion_point(module_scope)
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;server 와 client 코드에서 위 모듈을 불러와서 사용하게 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;serverpy&quot;&gt;server.py&lt;/h3&gt;

&lt;p&gt;서버 코드를 아래와 같이 구현합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;concurrent&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grpc&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;python_out.service_pb2&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;python_out.service_pb2_grpc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service_pb2_grpc&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestServicer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service_pb2_grpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestServicer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;service_pb2_grpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_TestServicer_to_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TestServicer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_insecure_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[::]:50051'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_for_termination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;service_pb2_grpc.py&lt;/code&gt; 에 정의된 stub class TestServicer 를 상속받아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;service.proto&lt;/code&gt; 에 정의했던 &lt;code class=&quot;highlighter-rouge&quot;&gt;rpc GetSum(Data) returns (Sum) {}&lt;/code&gt; 의 실제 동작 부분을 구현해주면 됩니다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;serve()&lt;/code&gt; 에서 서버를 실행시켜줍니다.
server.py 코드를 실행하면 서버가 실행됩니다.&lt;/p&gt;

&lt;h3 id=&quot;clientpy&quot;&gt;client.py&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grpc&lt;/span&gt;


&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;python_out.service_pb2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service_pb2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;python_out.service_pb2_grpc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service_pb2_grpc&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service_pb2_grpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestStub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service_pb2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Received sum: {response}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insecure_channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'localhost:50051'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service_pb2_grpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestStub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-------------- Get Sum --------------&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 server에 요청을 보내서 두 수의 합을 구하는 client 코드입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;service_pb2_grpc&lt;/code&gt; 에 선언된 stub class를 이용해서 GetSum 함수를 호출하고 인자로 &lt;code class=&quot;highlighter-rouge&quot;&gt;service_pb2&lt;/code&gt; 에 정의된 &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; class 의 인스턴스를 넘깁니다. 그리고 response 값으로 두 수의 합을 받아옵니다.
client 코드를 실행하면 다음과 같은 결과를 얻을 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;--------------&lt;/span&gt; Get Sum &lt;span class=&quot;nt&quot;&gt;--------------&lt;/span&gt;
Received &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;: 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제는 크게 어렵지 않았는데, gRPC의 개념에 대해서는 익숙하지 않아 이해하기 좀 어려웠습니다. 그렇지만 예제를 한번 작성해보고 나니, 개념과 장점에 대해서 좀 더 잘 와닿았던 것 같습니다. 다음에는 tensorflow serving 에서 제공하는 gRPC 통신으로 변경 시 성능 변화가 얼마나 있는지 테스트 해보려고 합니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">tensorflow serving에서 제공하는 gRPC 통신을 사용해보기전 간단히 gRPC에 대한 개념을 공부하고, 간단한 예제를 구현해보았습니다.</summary></entry><entry><title type="html">Deview 2019</title><link href="https://inahjeon.github.io/conference/2019/10/28/deview2019.html" rel="alternate" type="text/html" title="Deview 2019" /><published>2019-10-28T13:20:00-05:00</published><updated>2019-10-28T13:20:00-05:00</updated><id>https://inahjeon.github.io/conference/2019/10/28/deview2019</id><content type="html" xml:base="https://inahjeon.github.io/conference/2019/10/28/deview2019.html">&lt;p&gt;&lt;a href=&quot;https://deview.kr/2019/schedule&quot;&gt;Deview2019&lt;/a&gt; 참석 후 작성한 세션 요약글 입니다.&lt;/p&gt;

&lt;h1 id=&quot;세션1-외산-클라우드-없이-ai-플랫폼-제공하기-features-training-serving-and-ai-suite---현동석님&quot;&gt;세션1: 외산 클라우드 없이 AI 플랫폼 제공하기: features, training, serving, and AI Suite. - 현동석님&lt;/h1&gt;

&lt;p&gt;모델을 연구하는 사람들이 모델 연구에만 집중할 수 있도록 다양한 ml 서비스들을 제공하기 위한 플랫폼&lt;/p&gt;

&lt;h2 id=&quot;1-자체-ai-플랫폼이-필요한-이유&quot;&gt;1. 자체 AI 플랫폼이 필요한 이유&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;security - 데이터에 대한 보관, 반출 제한 등&lt;/li&gt;
  &lt;li&gt;cost - 연산량이 적은 경우 클라우드 사용이 유리. 그러나 대용량 데이터 처리를 지속 수행한다면 비용이 큼&lt;/li&gt;
  &lt;li&gt;demand - 머신러인 수요는 기하급수적으로 증가. 초기 각자 구축하던 부분에서 공통적인 부분을 플랫폼에서 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-어떻게-만들어야-할지-생각해보기--ai-suite&quot;&gt;2. 어떻게 만들어야 할지 생각해보기 &amp;gt; AI Suite&lt;/h2&gt;

&lt;p&gt;이미 구축된 플랫폼이 많았음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;분산저장 플랫폼&lt;/li&gt;
  &lt;li&gt;분산 처리 플랫폼&lt;/li&gt;
  &lt;li&gt;피쳐 엔지니어링 플랫폼 &amp;gt; 없음&lt;/li&gt;
  &lt;li&gt;모델 학습 플랫폼&lt;/li&gt;
  &lt;li&gt;모델 서빙 플랫폼&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;하면서-알게-된-머신러닝-모델-제품화의-세-단계&quot;&gt;하면서 알게 된 머신러닝 모델 제품화의 세 단계&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;데이터 처리
    &lt;ul&gt;
      &lt;li&gt;데이터 수배, 검토, 처리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모델 학습
    &lt;ul&gt;
      &lt;li&gt;모델 학습, 평가, 튜닝&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서빙
    &lt;ul&gt;
      &lt;li&gt;성능 평가(응답, 처리량)과 용량 산정 후 서비스로 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;실제로-모델을-제품화할-때-필요한-것들&quot;&gt;실제로 모델을 제품화할 때 필요한 것들&lt;/h3&gt;

&lt;p&gt;모델성능을 최적화하는 것보다 인프라를 만들고 처리하는 시간이 오래걸림&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;데이터 처리가 오래 걸립니다.&lt;/li&gt;
  &lt;li&gt;자동화를 고려해야합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3-머신러닝-데이터-준비-자동화하기-ai-features&quot;&gt;3. 머신러닝 데이터 준비 자동화하기: AI Features&lt;/h2&gt;

&lt;p&gt;(네이버는 분산 저장 플랫폼에 데이터가 다 저장되어있고 카탈로그를 웹에서 볼 수 있음)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DUMP: 데이터를 어딘가로 가져와서 (hive QL)&lt;/li&gt;
  &lt;li&gt;ANALYZE: 잘못됐거나 biased 데이터는 없나 보고, 간단한 가시화를 통해 데이터에 대한 인사이트를 얻은 후 (&lt;a href=&quot;https://github.com/PAIR-code/facets&quot;&gt;facet&lt;/a&gt;, jupyter)&lt;/li&gt;
  &lt;li&gt;BATCH: 잘못된 데이터는 버리고, 나머지는 가공해서 피쳐벡터를 만듦 (pyspark)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-스냅샷-떠놓기--dump&quot;&gt;데이터 스냅샷 떠놓기 &amp;gt; DUMP&lt;/h3&gt;

&lt;h3 id=&quot;데이터-분석하기검증--가공하기&quot;&gt;데이터 분석하기(검증) &amp;amp; 가공하기&lt;/h3&gt;

&lt;h4 id=&quot;problem&quot;&gt;Problem&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;facet은 데이터를 클라이언트에서 처리&lt;/li&gt;
  &lt;li&gt;10만건 이상의 데이터는 엄청 느려짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;solution&quot;&gt;Solution&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;데이터를 가시화는 인사이트를 얻기 위함&lt;/li&gt;
  &lt;li&gt;모든 데이터를 다 볼 필요는 없고, &lt;strong&gt;샘플링된 데이터로만 보면 됨.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tip1&quot;&gt;Tip1&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;jupyter notebook에서 pyspark를 실행하면 cluster mode로 돌지 않음. (client mode임)&lt;/li&gt;
  &lt;li&gt;노트북에서는 샘플데이터에 대해 수행하고, batch 기능을 통해 클러스터 모드로 수행하도록 지원함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tip2&quot;&gt;Tip2&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;텍스트데이터는 대부분 NLP가 필요함&lt;/li&gt;
  &lt;li&gt;NLP는 사전 데이터와 함께 사용함. &amp;gt; 분산 처리에 적합하지 않음. (수행될 노드에 사전이 설치되어 있어야함)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NLP API + Throttling proxy(nginx) + mapParition(for bulk request) + UDF로 해결&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-머신러닝-모델-학습&quot;&gt;4. 머신러닝 모델 학습&lt;/h2&gt;

&lt;h3 id=&quot;모델-연구-때와는-다른-제품화-때의-관점&quot;&gt;모델 연구 때와는 다른 제품화 때의 관점&lt;/h3&gt;

&lt;h4 id=&quot;연구시&quot;&gt;연구시&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;가능한 자원을 모두 사용하여 빨리 학습하고 평가하는 과정을 반복&lt;/li&gt;
  &lt;li&gt;최대한 동시에 실행해서 제일 성능 좋은 모델과 파라미터를 얻는 것이 목적&lt;/li&gt;
  &lt;li&gt;데이터는 고정 되므로 캐싱하면 이득이 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;제품화시&quot;&gt;제품화시&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;학습에 걸리는 시간을 이미 알고 있음.&lt;/li&gt;
  &lt;li&gt;다음 번 갱신 전까지만 학습이 완료되면 됨&lt;/li&gt;
  &lt;li&gt;일정 시간 내 최소의 자원을 사용하면 좋음&lt;/li&gt;
  &lt;li&gt;배포 전/후 모델의 품질을 검증할 필요가 있음 (validation 필요 - ex. hamming distance 등)&lt;/li&gt;
  &lt;li&gt;매번 새로운 데이터로 학습하는 경우가 많아 데이터 개싱 이득이 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;학습-자동화&quot;&gt;학습 자동화&lt;/h3&gt;

&lt;p&gt;ML code =&amp;gt; docker image =&amp;gt; resource 입력 후 학습&lt;/p&gt;

&lt;h2 id=&quot;5-머신러닝-모델-서빙하기&quot;&gt;5. 머신러닝 모델 서빙하기&lt;/h2&gt;

&lt;h3 id=&quot;서빙-아키텍처-소개&quot;&gt;서빙 아키텍처 소개&lt;/h3&gt;

&lt;h4 id=&quot;서빙--aps-서빙--모델-서빙&quot;&gt;서빙 = APS 서빙 + 모델 서빙&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;TFS(TFserving), CFS(Caffe servinf) 등 사용&lt;/li&gt;
  &lt;li&gt;PyTorch model &amp;gt; onnx converting &amp;gt; .onnx&lt;/li&gt;
  &lt;li&gt;TF -&amp;gt; SavedModelBuilder &amp;gt; .pb&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;aps-서버-전처리-후처리-전담-서버&quot;&gt;APS 서버: 전처리 후처리 전담 서버&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;APS 서버 에서 전처리 및 후처리 작업을 한 후, serving 서버에 inference 요청을 날림.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;APS 서버가 inference 서버의 frontend 역할을 함 (비지니스 로직, 메타 데이터 정보를 가짐)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인퍼런스-서버-띄우기&quot;&gt;인퍼런스 서버 띄우기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용자는 모델과 resource 만 입력&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-전후-처리-서버-띄우기&quot;&gt;데이터 전후 처리 서버 띄우기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;git 저장소의 코드 -&amp;gt; CI/CD&lt;/li&gt;
  &lt;li&gt;json -&amp;gt; gRPC로 매핑해서 날려줌&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-모든-단계를-자동화하기&quot;&gt;6. 모든 단계를 자동화하기&lt;/h2&gt;

&lt;h3 id=&quot;각-단계를-api로-만들기&quot;&gt;각 단계를 API로 만들기&lt;/h3&gt;

&lt;h3 id=&quot;드래그-앤-드롭으로-파이프라인-작업-코드-자동-생성하기&quot;&gt;드래그 앤 드롭으로 파이프라인 작업 코드 자동 생성하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;MNIST 데모 시연함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;알아서-자동으로-배포하게-만들기&quot;&gt;알아서 자동으로 배포하게 만들기&lt;/h3&gt;

&lt;h3 id=&quot;최종-데모&quot;&gt;최종 데모&lt;/h3&gt;

&lt;h1 id=&quot;세션2-신호처리-이론으로-실용적인-스타일-변환-모델-만들기-better-faster-stronger-transfer---유재준님&quot;&gt;세션2: 신호처리 이론으로 실용적인 스타일 변환 모델 만들기 (Better Faster Stronger Transfer) - 유재준님&lt;/h1&gt;

&lt;h2 id=&quot;1-스타일-트랜스퍼란&quot;&gt;1. 스타일 트랜스퍼란?&lt;/h2&gt;

&lt;p&gt;이미지에서 스타일은 뭘까? 컨텐츠는 뭘까? 그리고 어떻게 옮기지?&lt;/p&gt;

&lt;h3 id=&quot;artistic-style-transfer-vs-photo-realistic-style-transfer&quot;&gt;Artistic style transfer vs. Photo-realistic style transfer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Artistic style transfer: 이미지를 예술적으로 변환하는 문제 (ex. Gatys et al. CVPR 16)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Photo-realistic style transfer: 이미지를 사실적으로 변환하는 문제 (ex. 낮에서 저녁으로 등)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;style-transfer-왜-중요한데&quot;&gt;Style transfer 왜 중요한데?&lt;/h3&gt;

&lt;p&gt;Style transfer: Generative model&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unsupervised Learning&lt;/li&gt;
  &lt;li&gt;Representation Learning&lt;/li&gt;
  &lt;li&gt;Feature extraction&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;질감-생성-옛날에는-어떻게-했을까&quot;&gt;질감 생성: 옛날에는 어떻게 했을까?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;어떤 선형 필터들의 조합으로 표현&lt;/li&gt;
  &lt;li&gt;질감마다 필터 정의가 필요했음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;최초로-cnns을-사용한-연구---neural-style-algorithm&quot;&gt;최초로 CNNs을 사용한 연구 - Neural Style Algorithm&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Gatys et al., NIPS 2015&lt;/li&gt;
  &lt;li&gt;Gatys et al., CVPR 2016&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-스타일-트랜스퍼-왜-되는걸까&quot;&gt;2. 스타일 트랜스퍼, 왜 되는걸까?&lt;/h2&gt;

&lt;h3 id=&quot;how-it-works&quot;&gt;How it works?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Minimizing Maximum Mean Discrepancy (MMD) (Li et al., IJCAI 2017)&lt;/li&gt;
  &lt;li&gt;두게의 분포 사이의 거리를 최소화하는 것과 같음을 밝혀냄&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-vgg만-잘되나&quot;&gt;Why VGG만 잘되나?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;아직 밝혀지지 않음.&lt;/li&gt;
  &lt;li&gt;CNNs 가 texture에 편향되어 있음을 밝혀낸 논문이 있음 (&lt;a href=&quot;https://openreview.net/pdf?id=Bygh9j09KX&quot;&gt;Gerihos et al., ICLR 2019&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;CNN이 사실 구조를 보는 것이 아니라 texture를 봄. 사람은 구조를 보고 판단.&lt;/li&gt;
  &lt;li&gt;VGG가 특히 texture에 민감&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-스타일-트랜스퍼-최신-연구-흐름-한-눈에-살펴보기&quot;&gt;3. 스타일 트랜스퍼: 최신 연구 흐름 한 눈에 살펴보기&lt;/h2&gt;

&lt;h3 id=&quot;artistic-style-transfer-recent-trends-why--how&quot;&gt;Artistic Style Transfer: recent trends, why &amp;amp; how?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 스타일마다 네트워크 하나씩 학습하는 것이 필요. 실용적이지 않음&lt;/li&gt;
  &lt;li&gt;Instance Normalization: 스타일 변환 결과가 컨텐츠 이미지의 Contrast에 따라 바뀌지 않게 하자&lt;/li&gt;
  &lt;li&gt;Conditional Instance Normalization (CIN): 하나의 모델이 하나의 스타일만 변환하던 문제해결을 시도&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Adaptive Instance Normalization (AdaIN)&lt;/strong&gt;: Scaling과 Shifting 값을 구하는 과정을 학습과 분리함. (고양이, 사자를 따로 encoding 후 사자 스타일을 고양이에 입힘)&lt;/li&gt;
  &lt;li&gt;Whitening and Coloring Transforms (WCT): AdaIn에서 평균과 분산만 맞추던 것을 공분산까지 맞춤&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;photorealistic-style-transfer-recent-trends-why--how&quot;&gt;Photorealistic Style Transfer: recent trends, why &amp;amp; how?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Deep Photo Style Transfer: 스타일 변환 전후 픽셀 간의 관계를 맞춰줌. gram matrix를 영역별로 나눠서 최적화.&lt;/li&gt;
  &lt;li&gt;PhotoWCT: decoding 할때 어디서 max pooling이 일어낫는지 알려줌 &amp;gt; 후처리에서 다 보정됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;wct-via-wavelet-corrected-transforms-wct2-후처리-없이-기존-모델보다-성능이-좋은-모델을-개발&quot;&gt;WCT via Wavelet Corrected Transforms (WCT2): 후처리 없이 기존 모델보다 성능이 좋은 모델을 개발.&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Pooling과 비슷한 역할을 하면서 Encode-decode 과정에서 정보를 잃지 않아야하고, 입력이미지의 특징을 잘 표현할수 있는 모듈 -&amp;gt; Wavelet 변환 활용함. (신호 처리 이론)&lt;/li&gt;
  &lt;li&gt;Multi-level 대신 한번의 feed-forward만 수행&lt;/li&gt;
  &lt;li&gt;비디오 스타일 변환도 잘 됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;세션3-문자인식ocr-얼마나-정확하지-문자인식-성능을-정확하게-측정하는-방법---최찬규님&quot;&gt;세션3: 문자인식(OCR), 얼마나 정확하지? (문자인식 성능을 정확하게 측정하는 방법) - 최찬규님&lt;/h1&gt;

&lt;h2 id=&quot;1-성능평가의-중요성&quot;&gt;1. 성능평가의 중요성&lt;/h2&gt;

&lt;h3 id=&quot;성능-평가의-중요성&quot;&gt;성능 평가의 중요성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;성능을 개선하기 위해 (문제점을 정확하게 파악)&lt;/li&gt;
  &lt;li&gt;모델 선택 (많은 모델 중 어떤 모델을 서비스 할 것인가?)&lt;/li&gt;
  &lt;li&gt;다른 연구 그룹과의 성능 비교 (ImageNet, Kaggle)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;어떻게-하나&quot;&gt;어떻게 하나?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;눈으로 (사람이 직접 평가): 시간과 비용이 많이 들고, 평가에 오류가 있을 수 있음&lt;/li&gt;
  &lt;li&gt;컴퓨터 (자동 평가 시스템): 시간과 비용이 거의 들지 않으며, 평가에 오류가 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-문자인식-개론&quot;&gt;2. 문자인식 개론&lt;/h2&gt;

&lt;p&gt;문자인식: 오프라인의 글자를 기계가 읽을 수 있도록 디지털화 한것&lt;/p&gt;

&lt;h3 id=&quot;응용분야&quot;&gt;응용분야&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자동차 번호판, 명함, 신용카드, 신분증 인식, 이미지 번역 등&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;문자인식-과정&quot;&gt;문자인식 과정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;문자검출: text detection&lt;/li&gt;
  &lt;li&gt;문자 인식: text recognition&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-기존의-성능-측정-방법&quot;&gt;3. 기존의 성능 측정 방법&lt;/h2&gt;

&lt;h3 id=&quot;precision--recall&quot;&gt;Precision &amp;amp; Recall&lt;/h3&gt;
&lt;p&gt;ex) 암진단 - TP, FN, FP, TN&lt;/p&gt;

&lt;p&gt;Precision: 예측한 True 중에서 True를 올바르게 예측한 비율
Recall: 실제 True 중에서 True를 올바르게 예측한 비율&lt;/p&gt;

&lt;h3 id=&quot;검출기인식기end-to-end-성능-측정방법&quot;&gt;검출기/인식기/End-to-End 성능 측정방법&lt;/h3&gt;

&lt;h4 id=&quot;문자검출&quot;&gt;문자검출&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;IoU (Intersection over Union): 정답(Ground Truth)와 예측 박스의 영역이 얼마나 겹치는지 확인 (50%이상이면 hit)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;문자인식&quot;&gt;문자인식&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;WEM(Word based Exactly Matching): 정답과 예측 단어가 정확히 일치하는지 체크 (단어기반)&lt;/li&gt;
  &lt;li&gt;1-NED(Normalized Edit Distance): 두 단어간 편집거리(삽입, 교환, 삭제)를 측정한 뒤, 긴 단어의 길이로 정규화 (글자기반)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;end-to-end-검출인식-평가&quot;&gt;End-to-End (검출+인식) 평가&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/67667596-7fca4200-f9b1-11e9-8604-4c6ce438915c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;순차(Cascade) 평가 처리: 검출 평가(IoU) -&amp;gt; 인식 평가(WEM, 1-NED)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-기존-방법의-문제점-사례와-그-빈도&quot;&gt;4. 기존 방법의 문제점 (사례와 그 빈도)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;정교한 성능 측정 불가 (IoU에서 겹치는 영역이 50%가 넘지만 필요한 글자를 인식하지 못한 경우)&lt;/li&gt;
  &lt;li&gt;One-to-Many, Many-to-One 문제
    &lt;ul&gt;
      &lt;li&gt;One-to-Many: 하나의 정답 박스가 여러개의 박스로 나뉘어 예측되는 경우 (split) e.g) Riverside -&amp;gt; River, side&lt;/li&gt;
      &lt;li&gt;Many-to-One: 여러개의 정답 박스가 한개의 박스로 합쳐져 예측되는 경우 (Merge)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;end-to-end에서 잘못된 오류가 전파됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-신규-제안-방법--popeval&quot;&gt;5. 신규 제안 방법 : PopEval&lt;/h2&gt;

&lt;h3 id=&quot;설계시-고려한-점&quot;&gt;설계시 고려한 점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;End-to-End 평가&lt;/li&gt;
  &lt;li&gt;One-to-Many, Many-to-One 문제 해결&lt;/li&gt;
  &lt;li&gt;정교하게 세부적으로 성능 측정 가능&lt;/li&gt;
  &lt;li&gt;기존 평가셋과 호환되어야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;신규-방법&quot;&gt;신규 방법&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/67667597-7fca4200-f9b1-11e9-9739-5e6781252d04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;겹치는 영역의 글자 중에서, 같은 글자(=맞춘 글자)를 하나씩 지움&lt;/li&gt;
  &lt;li&gt;Recall: 맞춘 글자수 / 정답 글자수&lt;/li&gt;
  &lt;li&gt;Precision: 맞축 글자수 / 예측한 글자수&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;엣지-케이스&quot;&gt;엣지 케이스&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;제거해야할 글자가 중복될 경우 어떤 글자부터 제거할 것인가? e.g. N”A”VER, P”A”PAGO&lt;/li&gt;
  &lt;li&gt;중복이 없는 박스 우선 제거, 교집합이 클수록 우선&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-신규-성능-평가-방법의-검증-실험&quot;&gt;6. 신규 성능 평가 방법의 검증 실험&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;One-to-Many, Many-to-One 문제는 얼마나 발생하나? 전체 2~9%. 리더보드 TOP10 순위에 영향을 줌&lt;/li&gt;
  &lt;li&gt;기존 평가셋(=단어 단위)과 호환 가능한가? 호환 가능&lt;/li&gt;
  &lt;li&gt;신규 평가 방법은 믿을만 한가? (평가자를 모집해서 기존/신규 평가 방법에 대한 평가)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;실험-환경&quot;&gt;실험 환경&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;OCR 평가셋 - IC13, IC15 평가셋 사용&lt;/li&gt;
  &lt;li&gt;예측 모델:
    &lt;ul&gt;
      &lt;li&gt;검출기: EAST, PixelLink&lt;/li&gt;
      &lt;li&gt;인식기: GRCNN, ASTER&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;세션4-레이블링-조금-잘못돼도-괜찮아요-clova가-레이블-노이즈-잡는-법---강재욱님&quot;&gt;세션4: 레이블링 조금 잘못돼도 괜찮아요: Clova가 레이블 노이즈 잡는 법 - 강재욱님&lt;/h1&gt;

&lt;p&gt;데이터 전략에 대한 노하우가 실제 경쟁력이라고 생각함.&lt;/p&gt;

&lt;h2 id=&quot;1-레이블-노이즈가-무엇인가&quot;&gt;1. 레이블 노이즈가 무엇인가?&lt;/h2&gt;

&lt;p&gt;레이블 노이즈: 같은 범주의 데이터를 잘못 설명하는 의도되지 않은 Mislabel&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/67667595-7f31ab80-f9b1-11e9-87c4-3942fc54f3b7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;왜-문제인가&quot;&gt;왜 문제인가?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;레이블 노이즈는 모델의 feature extraction 을 어렵게함&lt;/li&gt;
  &lt;li&gt;모델의 성능을 떨어뜨리게 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;어떻게-해결할-것인가&quot;&gt;어떻게 해결할 것인가?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;훈련모델 = 훈련방법 (데이터, 모델구조)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;approach1-모델구조&quot;&gt;Approach1: 모델구조:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;복잡한 패턴도 잘 인식하는 모델 구조를 쓴다&lt;/li&gt;
  &lt;li&gt;서빙 및 훈련 계산량이 증가함&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;approach2-훈련방법&quot;&gt;Approach2: 훈련방법&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;커리큘럼을 만들어서 학습시킨다. (쉬운 데이터 부터 학습)&lt;/li&gt;
  &lt;li&gt;훈련 계산량 증가 + 추가 데이터 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;approach3-data-cleaning-method&quot;&gt;Approach3: Data Cleaning Method&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Human Data Cleaning&lt;/li&gt;
  &lt;li&gt;Active Learning (모델이 1차로 labeling -&amp;gt; 사람이 re-labeling)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;사람의-도움-없이-레이블-노이즈를-제거-할-수-없을까&quot;&gt;사람의 도움 없이 레이블 노이즈를 제거 할 수 없을까?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Model inference&lt;/li&gt;
  &lt;li&gt;Relabeling by model&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-레이블링-바로잡는-automl-in-project-khan&quot;&gt;2. 레이블링 바로잡는 AutoML (in project Khan)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;문제: 흰 오리 한마리가 mislabeled 되어있을 때 어떻게 고칠 수 있을까?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;split--train---check-알고리즘&quot;&gt;Split -Train - Check 알고리즘&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Split: 전체 dataset을 train /valid set으로 분할&lt;/li&gt;
  &lt;li&gt;Train: correction을 위한 “기준 데이터”&lt;/li&gt;
  &lt;li&gt;Checker : 레이블 Correction용도로 훈련한 모델. valid set를 훈련된 checker에 입력하여 labeling 검사!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;multisplit--train--check---vote&quot;&gt;MultiSplit – Train – Check - Vote&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/67667594-7f31ab80-f9b1-11e9-8dfa-6e454d11d5bf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여러버전의 Split branch를 구성&lt;/li&gt;
  &lt;li&gt;Vote: Label update를 위해서 각 branch의 “Split-Train-Check” 결과를 결합&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;어떻게-vote하면-좋을까&quot;&gt;어떻게 Vote하면 좋을까?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Majority Vote: 가장 단순한 방법.&lt;/li&gt;
  &lt;li&gt;checker 의 soft-value 값을 활용! -&amp;gt; PICO&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-pico-probabilistic-iterative-correction&quot;&gt;3. PICO: Probabilistic Iterative COrrection&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;checker의 결과 베이지안 확률 결합&lt;/li&gt;
  &lt;li&gt;labeling의 Iterative Probabilistic correction&lt;/li&gt;
  &lt;li&gt;레이블링 히스토리의 hidden markov modeling을 통한 반영&lt;/li&gt;
  &lt;li&gt;반복적 확률적 Vote를 통해서 점진적으로 레이블 노이즈를 제거함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설계와-구현사이-삽질기&quot;&gt;설계와 구현사이 삽질기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;많은 checker를 학습해야함. (GPU 리소스 이슈)&lt;/li&gt;
  &lt;li&gt;확률값 저장 시 메모리 이슈 (Spark, sparse matrix 활용)&lt;/li&gt;
  &lt;li&gt;inference 서버 부하 이슈 (local serving project)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pico-architecture&quot;&gt;PICO Architecture&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/67667851-1f87d000-f9b2-11e9-9ddb-fc95202e9a6a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-faq-데이터-셋에-적용해-보기&quot;&gt;4. FAQ 데이터 셋에 적용해 보기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;LINE 사용에 관한 FAQ 톡 서비스 데이터 set에 적용&lt;/li&gt;
  &lt;li&gt;일반적인 답변 인텐트 -&amp;gt; 구체적인 답변 인텐트로 변화함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-개선-방향&quot;&gt;5. 개선 방향&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;효율개선 - 데이터 셋 품질 사전 검증 모듈(PICO-trigger)&lt;/li&gt;
  &lt;li&gt;품질개선: 생성모델를 통한 Imbalance Dataset 문제 해결&lt;/li&gt;
  &lt;li&gt;품질개선: 다양한 Metric voting 방식 적용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-요약&quot;&gt;6. 요약&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 품질 전략이 없는 AI 프로젝트는 성공 하기 어려움&lt;/li&gt;
  &lt;li&gt;AI 데이터 자동정제 파이프라인은 매우 큰 경쟁력&lt;/li&gt;
  &lt;li&gt;Naver Clova Chatbot Builder는 PICO를 통해서 데이터 자동 정제하여 서비스 품질 개선&lt;/li&gt;
  &lt;li&gt;PICO 아키텍쳐는 다른 종류 데이터 셋에도 적용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;세션5-자율주행-시뮬레이터를-개발하면서-경험한-한계점-및-활용-방안---홍준님&quot;&gt;세션5: 자율주행 시뮬레이터를 개발하면서 경험한 한계점 및 활용 방안 - 홍준님&lt;/h1&gt;

&lt;h2 id=&quot;0-전달하고자-하는-내용&quot;&gt;0. 전달하고자 하는 내용&lt;/h2&gt;

&lt;p&gt;시뮬레이터의 한계점과 효과적으로 활용할 수 있는 방법&lt;/p&gt;

&lt;h2 id=&quot;1-자율주행-시뮬레이터란&quot;&gt;1. 자율주행 시뮬레이터란?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Real-World를 대체하는 것이 시뮬레이터의 역할임.&lt;/li&gt;
  &lt;li&gt;구현하기 어려운 Edge case(차량에 비친 차량, 도로 위에 날아다니는 비닐 등) 들이 존재함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;시뮬레이터가-필요한-이유&quot;&gt;시뮬레이터가 필요한 이유?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;실차를 이용하는 필드 테스트의 한계점이 있기 때문에&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;시뮬레이터에서의-이슈&quot;&gt;시뮬레이터에서의 이슈&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;실제와 얼마나 비슷한가?&lt;/li&gt;
  &lt;li&gt;GT를 얻을 수 있는가?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-인지-분야에서의-이슈&quot;&gt;2. “인지” 분야에서의 이슈&lt;/h2&gt;

&lt;h3 id=&quot;질문1-가상-센서의-완벽한-정답-데이터를-얻을-수-있는가&quot;&gt;질문1: 가상 센서의 완벽한 정답 데이터를 얻을 수 있는가?&lt;/h3&gt;

&lt;h4 id=&quot;3d-map&quot;&gt;3D map&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;실제 존재하는 맵을 만들 경우 시간, 비용이 매우 많이 듦&lt;/li&gt;
  &lt;li&gt;해당 지역 촬영 및 3D 복원 -&amp;gt; 3D 리터치, 오브젝트 분리작업 -&amp;gt; 텍스쳐, 머티리얼, 라이팅 작업&lt;/li&gt;
  &lt;li&gt;표지판, 차량 등 오브젝트 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;gps&quot;&gt;GPS&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;정밀한 HD Map이 있어야 구현 가능함&lt;/li&gt;
  &lt;li&gt;신호가 약/강한 지역 구현&lt;/li&gt;
  &lt;li&gt;Sensor Noise modeling (Multipath error)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;camera&quot;&gt;Camera&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;아직은 현실 데이터와 차이가 많이 남&lt;/li&gt;
  &lt;li&gt;GT를 얻기 쉽기 때문에 virtual data를 많이 활용하려고 함.&lt;/li&gt;
  &lt;li&gt;Dataset으로써 역할은 충분히 가능함&lt;/li&gt;
  &lt;li&gt;Future work: 사용자의 카메라와 같은 “스타일”의 이미지로 데이터를 Translation해야한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lidar&quot;&gt;Lidar&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Distance + Intensity&lt;/li&gt;
  &lt;li&gt;Noise의 모델링이 실제와 너무 달라 어려움&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;질문2-센서는-몇개나-사용할-수-있나요&quot;&gt;질문2: 센서는 몇개나 사용할 수 있나요?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;환경 모사를 위한 CPU가 따로 필요함 (사용자의 PC성능에 달려있음)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-판단-분야에서의-이슈&quot;&gt;3. “판단” 분야에서의 이슈&lt;/h2&gt;

&lt;h3 id=&quot;질문3-시뮬레이터의-주변-차량들이-사람처럼-움직였으면-좋겠어요&quot;&gt;질문3: 시뮬레이터의 주변 차량들이 사람처럼 움직였으면 좋겠어요.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;주변 차량이 사람처럼 주행하려면 결국 완전 자율 주행이 가능해야 함.&lt;/li&gt;
  &lt;li&gt;실제 도로에는 다양한 차량, 성향의 사람이 존재함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;방법&quot;&gt;방법&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;주변 차량의 파라미터 자유도를 높이자&lt;/li&gt;
  &lt;li&gt;멀티플레이로 “진짜”사람이 운전하는 상대 차량&lt;/li&gt;
  &lt;li&gt;딥러닝 적용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;질문4-시나리오는-어떤것이-있나요&quot;&gt;질문4: 시나리오는 어떤것이 있나요?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;시나리오를 튜닝할 수 있도록 함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-제어-분야에서의-이슈&quot;&gt;4. “제어” 분야에서의 이슈&lt;/h2&gt;

&lt;h3 id=&quot;질문5-실제-차량과-가상의-차량의-dynamics가-얼마나-동일한가요&quot;&gt;질문5: 실제 차량과 가상의 차량의 Dynamics가 얼마나 동일한가요?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;꽤나 비슷하지만 필드 테스트는 꼭 필요함.&lt;/li&gt;
  &lt;li&gt;검증된 시뮬레이터들이 많음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-알고리즘-개발-넘김&quot;&gt;5. 알고리즘 개발 (넘김)&lt;/h2&gt;

&lt;h1 id=&quot;좋았던-점새로-알게됨-점시도해볼-것&quot;&gt;좋았던 점/새로 알게됨 점/시도해볼 것&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PAIR-code/facets&quot;&gt;facet&lt;/a&gt;으로 샘플 데이터 시각화&lt;/li&gt;
  &lt;li&gt;대용량 분산처리가 어려운 사전 NLP 작업의 경우(라이브러리 설치 등) API화 하여 호출하여 사용&lt;/li&gt;
  &lt;li&gt;모델 서빙 시 inference 서버 외 전/후 처리(비즈니스 로직 등)를 담당하는 서버 따로 사용&lt;/li&gt;
  &lt;li&gt;Labeling 오류 수정 자동화 &amp;gt; PICO 알고리즘 테스트 해보기&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Deview2019 참석 후 작성한 세션 요약글 입니다.</summary></entry><entry><title type="html">Devfest2019</title><link href="https://inahjeon.github.io/conference/2019/10/20/devfest2019.html" rel="alternate" type="text/html" title="Devfest2019" /><published>2019-10-20T11:46:00-05:00</published><updated>2019-10-20T11:46:00-05:00</updated><id>https://inahjeon.github.io/conference/2019/10/20/devfest2019</id><content type="html" xml:base="https://inahjeon.github.io/conference/2019/10/20/devfest2019.html">&lt;h1 id=&quot;쉽게-따라할-수-있는-한국어-임베딩-구축---이기창&quot;&gt;쉽게 따라할 수 있는 한국어 임베딩 구축 - 이기창&lt;/h1&gt;

&lt;h2 id=&quot;단어-임베딩으로-문서-분류하기&quot;&gt;단어 임베딩으로 문서 분류하기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;가장 많이 사용: fastText&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;핵심-컨셉&quot;&gt;핵심 컨셉&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;문서에 속한 단어가 유사하면 문서 의미도 비슷하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;문서-벡터를-어떻게-만드나&quot;&gt;문서 벡터를 어떻게 만드나?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;단어 임베딩의 합(sum)으로 문서 백터를 표현한다. (단어 벡터의 합 = 단어 벡터의 평균 = 문서 벡터의 중심)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;실험으로-검증&quot;&gt;실험으로 검증&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;네이버 영화 리뷰 말뭉치 활용&lt;/li&gt;
  &lt;li&gt;학습데이터(문장, label) 댓글을 모두 문서 벡터(단어 임베딩의 합)로 변환한다.&lt;/li&gt;
  &lt;li&gt;cosine similarity 가 가장 높은 학습 데이터의 label로 분류&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;시사점&quot;&gt;시사점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;복잡한 딥러닝 모델을 써도 80%대 성능 기록&lt;/li&gt;
  &lt;li&gt;단어 임베딩 품질이 좋으면 자연어처리 성능을 높일 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;임베딩이-어떻게-의미를-가지는가&quot;&gt;임베딩이 어떻게 의미를 가지는가&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;말뭉치의 통계적 패턴이 들어있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;back-of-words&quot;&gt;Back-of-Words&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;단어 빈도를 센다.&lt;/li&gt;
  &lt;li&gt;문서를 쓴이의 의도는 단어 사용 패턴에 드러난다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elmo-bert&quot;&gt;ELMo, Bert&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;단어가 어떤 순서로 나타나는지 살핀다. (bi-direction)&lt;/li&gt;
  &lt;li&gt;시퀀스 정보에 ㅡ이미가 녹아있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;word2vec-fasttext-glove&quot;&gt;Word2Vec, FastText, GloVe&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;단어가 어떤 단어와 주로 같이 나타나는지 살핀다.&lt;/li&gt;
  &lt;li&gt;문맥에 의미가 녹아있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문장-수준-임베딩-구축-및-활용-요즘-대세-elmo-bert&quot;&gt;문장 수준 임베딩 구축 및 활용 (요즘 대세): ELMo, BERT&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2014년은 워드 임베딩, 그 이후로 elmo (sentence embedding) 쪽으로 많이 연구되고 있음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ELMo: bidirectional LSTM, + CNN (다음 단어를 예측)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;BERT: (SOTA) Transformer network (Attention is all you need)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;문장-수준-임베딩&quot;&gt;문장 수준 임베딩&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;문장 수준 임베딩의 장점은 동음이의어 분간 가능&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;문장의 문맥적 의미를 벡터화할 수 있음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;토큰화 &amp;gt; vocabulary &amp;gt; 학습&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bert&quot;&gt;BERT&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/yeontaek/BERT-Korean-Model&lt;/li&gt;
  &lt;li&gt;SKT: https://github.com/SKTBrain/KoBERT&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;임베딩-활용&quot;&gt;임베딩 활용&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;임베딩이 가장 크게 쓰일 수있는 분야는 전이학습.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 네트워크의 입력값으로 사용돼 자연어 처리 성능을 높일 수 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Bengio &amp;gt; Data Augmentation &amp;gt; Mixup&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;clean-code-for-mlai---한성민&quot;&gt;Clean Code for ML/AI - 한성민&lt;/h1&gt;

&lt;h2 id=&quot;what-is-clean-code&quot;&gt;What is Clean Code&lt;/h2&gt;

&lt;p&gt;깨진 유리창 이론 ~ 코드 품질&lt;/p&gt;

&lt;p&gt;보이 스카웃 규칙 - 떠날 때는 찾을 때 보다 캠프장을 더욱 께끗이 할 것.&lt;/p&gt;

&lt;h2 id=&quot;usecase&quot;&gt;Usecase&lt;/h2&gt;

&lt;p&gt;코드 악취 - 코드에 문제가 발생할 때 생기는 나쁜냄새&lt;/p&gt;

&lt;h3 id=&quot;코드-악취-유형-1&quot;&gt;코드 악취 유형 1&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;branch는 코드 복잡도를 높이므로 너무 많이 사용하지 않는 것 이 좋음.&lt;/li&gt;
  &lt;li&gt;guard clause 패턴으로 코드를 아예 실행시키지 않도록 함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;코드-악취2---주석을-남용&quot;&gt;코드 악취2 - 주석을 남용&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자세하고 친절한 주석을 함수 이름으로 바꿔보세요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;코드-악취-3---중복코드&quot;&gt;코드 악취 3 - 중복코드&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;중복되는 코드 합치기&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;그밖의-코드-악취-케이스&quot;&gt;그밖의 코드 악취 케이스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;너무 긴 메소드&lt;/li&gt;
  &lt;li&gt;너무 거대한 클래스&lt;/li&gt;
  &lt;li&gt;상속 거부: 자식 클래스에서 부모 클래스의 규칙을 무시하고 오버라이드&lt;/li&gt;
  &lt;li&gt;과도한 복잡성&lt;/li&gt;
  &lt;li&gt;게으른 클래스: 클래스에 부여된 기능이 너무 적은 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;실제-모델-코드-최적화-attention-based-bidirectional-lstm&quot;&gt;실제 모델 코드 최적화: Attention-based bidirectional LSTM&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;안쓰는 키워드 제거&lt;/li&gt;
  &lt;li&gt;직접 기입되어 있는 설정 인수들을 전역 변수로 추출 (수정이 빈번하게 일어남)&lt;/li&gt;
  &lt;li&gt;복잡성이 높은 로직은 함수로 추출&lt;/li&gt;
  &lt;li&gt;조건식 단순화, 중복 코드 함수 추출 (모델 코드의 경우 조건을 사용하는 경우가 많음)&lt;/li&gt;
  &lt;li&gt;모델 혹은 옵티마이저의 인수정보들을 전역 변수에서 설정 프레임워크를 이용한 파라미터로 전환 (google/gin-config)&lt;/li&gt;
  &lt;li&gt;코드 컨벤션 공통화
    &lt;ul&gt;
      &lt;li&gt;single, double quotation&lt;/li&gt;
      &lt;li&gt;함수 사이 2줄&lt;/li&gt;
      &lt;li&gt;1줄을 넘어서는 함수 인수의 intent&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configuration-관리툴&quot;&gt;configuration 관리툴&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/IDSIA/sacred&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lint-quality-gate&quot;&gt;Lint, Quality gate&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;python lint 도구: pylint, flake8, pycodestyle&lt;/li&gt;
  &lt;li&gt;Quality gate 도구: code grade를 알려줌. (sonarqube, codeclimate, codebeat)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-anti-patterns&quot;&gt;The anti-patterns&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;if/switch 절의 남용 -&amp;gt; key access를 통한 분기대체&lt;/li&gt;
  &lt;li&gt;데이터 초기화와 데이터 삽입 로직의 분리: 고차함수를 이용한 대체
    &lt;blockquote&gt;
      &lt;p&gt;ex) 빈 배열 &amp;gt; append로 배열 채움.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;타입(type)의 부재&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;모델 테스트: 기존 테스트의 결과와 유사도로 검증 (일정 유사도 이하면 error)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;bert-in-kaggle---이유한-이영수-송원호&quot;&gt;BERT in kaggle - 이유한, 이영수, 송원호&lt;/h1&gt;

&lt;h2 id=&quot;transformer&quot;&gt;Transformer&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Encoder - Decoder 구조임 (seq-to-seq NMT에서 많이 사용)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;encoder&quot;&gt;Encoder&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;self-attension, feed forword network가 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;self-attension&quot;&gt;self-attension&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;sealed dot product
-&amp;gt; (Q,K 내적)유사도를 구해서 scalaing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bert-1&quot;&gt;BERT&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Pretraining (masked LM, Next sentence prediction)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fine-tuning&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Transformer의 Encoder만 사용함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;image-domain과-비교&quot;&gt;image domain과 비교&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CNN -&amp;gt; self-attention&lt;/li&gt;
  &lt;li&gt;Residual Block -&amp;gt; Encoder Block&lt;/li&gt;
  &lt;li&gt;RESNET -&amp;gt; transformer&lt;/li&gt;
  &lt;li&gt;RESNET(pretrained) -&amp;gt; BERT (pretrained)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;toxic-jigsaw-unintended-bias-in-tocity-classification&quot;&gt;Toxic Jigsaw unintended bias in tocity classification&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;정상 코멘트(문장, 문단, 단어,..)인지 악성 코멘트인지 분류하는 문제&lt;/li&gt;
  &lt;li&gt;특정 키워드가 포함되면 악성으로 구분할 확률이 상당히 높아짐. (정상인데 악성으로 분류되는 경우)&lt;/li&gt;
  &lt;li&gt;대회에서 키워드들을 제시함.&lt;/li&gt;
  &lt;li&gt;Metric: AUC, bias-AUC (특정 키워드가 포함되었지만 정상 코멘트를 잘 찾아내는 척도)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;진행방법&quot;&gt;진행방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Baseline: Fasttext -&amp;gt; RNN&lt;/li&gt;
  &lt;li&gt;evaluation EDA를 진행&lt;/li&gt;
  &lt;li&gt;커스텀 loss function을 정의함.&lt;/li&gt;
  &lt;li&gt;문맥에 따라 임베딩을 다르게 함. -&amp;gt; BERT를 활용&lt;/li&gt;
  &lt;li&gt;Ensemble 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;좋은 머신은 꼭 필요하다.&lt;/li&gt;
  &lt;li&gt;작은 모델 뿐 아니라 큰 모델 역실 중요하다&lt;/li&gt;
  &lt;li&gt;Evaluation에 맞는 loss를 잘 정의해야한다.&lt;/li&gt;
  &lt;li&gt;일찍 파이프라인을 구성하고 많은 실험을 시도한다.&lt;/li&gt;
  &lt;li&gt;제한된 시간 하에 높ㅇ느 점수를 내야해서 속도를 줄이기 위한 여러 기술이 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;molucle&quot;&gt;Molucle&lt;/h2&gt;

&lt;h3 id=&quot;분자-학습을-어떻게-시킬까&quot;&gt;분자 학습을 어떻게 시킬까?&lt;/h3&gt;

&lt;h4 id=&quot;왜-다양한-딥러닝-아키텍쳐가-필요할까&quot;&gt;왜 다양한 딥러닝 아키텍쳐가 필요할까?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;일반 머신러닝은 데이터를 표현하는데 한계가 있음 (LeCun)&lt;/li&gt;
  &lt;li&gt;주어진 데이터 내에서 피쳐를 잘 추출해내기 위함&lt;/li&gt;
  &lt;li&gt;데이터가 가진 정보는 다양한 형태, 관계, 성질을 가지기 때문&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;분자---그래프로-표현&quot;&gt;분자 -&amp;gt; 그래프로 표현&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;문장으로 표현해본다면?&lt;/li&gt;
  &lt;li&gt;분자가 가진 여러 정보들을 문장으로 표현 (e.g. 탄소 4개가 있음 등)&lt;/li&gt;
  &lt;li&gt;각각의 정보들을 임베딩해 vector로 만듦.&lt;/li&gt;
  &lt;li&gt;vector를 이어붙여 float sentence 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캐글에서-높은-점수를-얻으려면&quot;&gt;캐글에서 높은 점수를 얻으려면?&lt;/h3&gt;

&lt;h4 id=&quot;1-with-diversity-do-ensemble&quot;&gt;(1) with diversity, do ensemble!&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;difreret model -&amp;gt; different layer, different hidden dim&lt;/li&gt;
  &lt;li&gt;different seed -&amp;gt; different training subset&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-pseudo-labeling&quot;&gt;(2) Pseudo labeling&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;우리가 예측한 값을 target으로 한 test set으로 새로 학습하는것&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-함께-하라&quot;&gt;(3) 함께 하라!&lt;/h4&gt;

&lt;h3 id=&quot;모델의-성능을-높이기-위해-생각해야할-것&quot;&gt;모델의 성능을 높이기 위해 생각해야할 것!&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터의 핵심 피쳐를 잘 표한할 수 있는 학습 방식을 선택하라. (CNN, RNN, GNN, Transformer, Embedding)&lt;/li&gt;
  &lt;li&gt;데이터를 잘 학습할 수 있는 Loss function을 찾아라 (다 해봐야할).&lt;/li&gt;
  &lt;li&gt;학습이 잘 될 수 있는 조건을 최적화시켜라 (학습 스케쥴, 구조 최적화 등)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">쉽게 따라할 수 있는 한국어 임베딩 구축 - 이기창</summary></entry><entry><title type="html">Data augmentation in text classification</title><link href="https://inahjeon.github.io/nlp/2019/09/16/data-augmentation-in-nlp.html" rel="alternate" type="text/html" title="Data augmentation in text classification" /><published>2019-09-16T16:40:00-05:00</published><updated>2019-09-16T16:40:00-05:00</updated><id>https://inahjeon.github.io/nlp/2019/09/16/data-augmentation-in-nlp</id><content type="html" xml:base="https://inahjeon.github.io/nlp/2019/09/16/data-augmentation-in-nlp.html">&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1901.11196v1.pdf&quot;&gt;EDA: Easy Data Augmentation Techniques for Boosting Performance on
Text Classification Tasks&lt;/a&gt; 이라는 논문을 읽고 요약한 내용입니다.&lt;/p&gt;

&lt;h2 id=&quot;1-summary&quot;&gt;1. Summary:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;NLP에서 범용적으로 적용가능한 Data augmentation technique (EDA: Easy Data Augmentation)을 제안함.&lt;/li&gt;
  &lt;li&gt;제안한 방법 중 Synonym replacement에 대하서만 기존 연구결과가 있음. RI, RS, RD는 논문에서 새롭게 제안한 방법.&lt;/li&gt;
  &lt;li&gt;실험 했던 5개의 benchmark task (classifier - &lt;code class=&quot;highlighter-rouge&quot;&gt;RNN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CNN&lt;/code&gt;)에서 성능 개선이 있었고 특히 적은 샘플 데이터셋에서 효과가 있었음.&lt;/li&gt;
  &lt;li&gt;전체 학습셋 중 50%의 학습셋만 가지고 100% 학습셋을 사용했을 때의 최고 성능과 동일한 정확도를 낼 수 있었음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-제안한-방법&quot;&gt;2. 제안한 방법:&lt;/h2&gt;

&lt;h3 id=&quot;text-data-augmentation-operations&quot;&gt;Text data augmentation operations&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Synonym Replacement (SR)&lt;/strong&gt;: 문장에서 stop word가 아닌 랜덤 n개의 단어를 선택한 후, 랜덤하게 각 단어를 동의어로 변경.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Random Insertion (RI)&lt;/strong&gt;: 문장 내 특정 랜덤 단어의 랜덤 동의어를 찾아서, 문장 내 랜덤 위치에 동의어를 삽입하는 방식. n회 반복함.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Random Swap (RS)&lt;/strong&gt;: 문장 내 두개의 단어를 랜덤으로 선택해서 두 단어의 위치를 변경함. n회 반복함.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Random Deletion (RD)&lt;/strong&gt;: 문장 내 단어를 랜덤하게 p의 확률로 제거함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;parameter-n-α-설정&quot;&gt;Parameter n, α 설정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;문장의 길이에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;이 변경되도록 문장의 길이 (&lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;)을 수식에 반영함.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;n = αl&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;α&lt;/code&gt;: 문장 내 변경되는 단어의 비율, &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;: 문장의 길이)&lt;/li&gt;
  &lt;li&gt;각 문장마다 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;개의 augmented 문장을 생성하도록 함.&lt;/li&gt;
  &lt;li&gt;RD에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;p=α&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-실험방법&quot;&gt;3. 실험방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;5개의 benchmark text classification task를 사용
    &lt;ul&gt;
      &lt;li&gt;SST-2: Stanford Sentiment Treebank (&lt;a href=&quot;https://github.com/AcademiaSinicaNLPLab/sentiment_dataset&quot;&gt;Socher et al., 2013&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;CR: customer reviews (&lt;a href=&quot;https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html&quot;&gt;Hu and Liu, 2004; Liu et al., 2015&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;SUBJ: subjectivity/objectivity dataset (&lt;a href=&quot;http://www.cs.cornell.edu/people/pabo/movie-review-data/&quot;&gt;Pang and Lee, 2004&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;TREC: question type dataset (&lt;a href=&quot;https://cogcomp.seas.upenn.edu/Data/QA/QC/&quot;&gt;Li and Roth, 2002&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;PC: Pro-Con dataset (&lt;a href=&quot;https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html#datasets&quot;&gt;Ganapathibhotla and Liu, 2008&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/64959311-d715c680-d8cb-11e9-8d29-a02b0a91f3b9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용한 Classification method
    &lt;ul&gt;
      &lt;li&gt;LSTM-RNN (&lt;a href=&quot;https://arxiv.org/pdf/1605.05101.pdf&quot;&gt;Liu et al., 2016&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;CNN (&lt;a href=&quot;https://www.aclweb.org/anthology/D14-1181&quot;&gt;Kim, 2014&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-results&quot;&gt;4. Results&lt;/h2&gt;

&lt;h3 id=&quot;1-performance&quot;&gt;(1) Performance&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;5개 task에 대해 각 method의 평균 Accuracy를 측정함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/64959312-d715c680-d8cb-11e9-9186-265a0fe8fa33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-traning-set-size에-따른-실험-결과&quot;&gt;(2) Traning set size에 따른 실험 결과&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용하는 traning set size를 원본 데이터 크기의 {1, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100} 비율로 늘려가면서 테스트&lt;/li&gt;
  &lt;li&gt;100 사용 시 최고 정확도인 88.3% 정확도를 50%의 데이터를 활용했을 때 얻을 수 있었음 (88.6%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/64959313-d715c680-d8cb-11e9-9ef1-91e0805ad41e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-conserving-true-labels&quot;&gt;(3) Conserving true labels&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;augmenation으로 만들어진 데이터에 대해 원본 문장의 label이 보존되는지 차원 축소 및 데이터 시각화를 통해 확인함.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pro-con data에 대해 &lt;code class=&quot;highlighter-rouge&quot;&gt;t-SNE&lt;/code&gt; (Van Der Maaten, 2014) 차원축소를 통해 2D plot으로 시각화함.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/64959314-d715c680-d8cb-11e9-8025-82e2cb901285.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생성된 문장의 latent vector가 동일 label을 가진 원본 문장들과 가까운 위치에 있음을 확인할 수 있었음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-파라미터-α-에-대한-성능-분석&quot;&gt;(4) 파라미터 α 에 대한 성능 분석&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/64959316-d7ae5d00-d8cb-11e9-9177-acca412d1ca9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SR은 작은 α에 대해 잘 동작했음. 너무 많은 단어를 교체하면 원래 문장과 의미가 많이 달라져서 그럴것으로 해석함.&lt;/li&gt;
  &lt;li&gt;RI는 α에 대해 성능이 stable했음. 원래의 문장과 문장순서가 유지되기 때문에 그럴것으로 해석함.&lt;/li&gt;
  &lt;li&gt;RS는 α&amp;lt;0.2일때 높은 성능을 보이고 그 이후로는 줄어듦. 문장 내 단어의 순서를 너무 많이 바꾸면 성능이 떨어짐.&lt;/li&gt;
  &lt;li&gt;RD는 작은 α에 대해 잘 동작함.&lt;/li&gt;
  &lt;li&gt;대체로 모든 operation들에 대해 α=0.1이 좋은 성능을 보였음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-how-much-augmentation-n에-대한-성능-분석&quot;&gt;(5) How much augmentation? n에 대한 성능 분석&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;n={1, 2, 4, 8, 16, 32} 로 실험하여 데이터셋의 크기별 최적의 α, n 값에 대해 제시함.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 크기별 추천하는 파라미터값&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16538186/64959310-d67d3000-d8cb-11e9-8f36-ff609370328a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-reference&quot;&gt;5. Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Paper: &lt;a href=&quot;https://arxiv.org/pdf/1901.11196v1.pdf&quot;&gt;EDA: Easy Data Augmentation Techniques for Boosting Performance on
Text Classification Tasks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Code: &lt;a href=&quot;https://github.com/jasonwei20/eda_nlp&quot;&gt;https://github.com/jasonwei20/eda_nlp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">EDA: Easy Data Augmentation Techniques for Boosting Performance on Text Classification Tasks 이라는 논문을 읽고 요약한 내용입니다.</summary></entry></feed>